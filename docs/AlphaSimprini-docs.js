minispade.register('alpha_simprini', "(function() {(function() {\n  var AS, Pathology, Taxi;\n\n  Pathology = require(\"pathology\");\n\n  Taxi = require(\"taxi\");\nminispade.require(\"./alpha_simprini/string\");\nminispade.require(\"./alpha_simprini/core/logging\");\n\n  AS = module.exports = Pathology.Namespace[\"new\"](\"AlphaSimprini\");\n\n  AS.unimplemented = function(method) {\n    return function() {\n      throw new Error([\"you MUST implement the method '\" + method + \"' on: \" + (this.toString())]);\n    };\n  };\n\n  AS.part = function(name) {\n    return exports[name] = {\n      require: function(libraries) {\n        return AS.require(name.toLowerCase(), libraries);\n      }\n    };\n  };\n\n  AS.Models = Pathology.Namespace[\"new\"]();\n\n  AS.Views = Pathology.Namespace[\"new\"]();\n\n  AS.Object = Pathology.Object;\n\n  AS.Map = Pathology.Map;\n\n  AS.Module = Pathology.Module;\n\n  AS.Namespace = Pathology.Namespace;\n\n  AS.Property = Taxi.Property;\n\n  AS.COLLECTION_DELEGATES = [\"first\", \"rest\", \"last\", \"compact\", \"flatten\", \"without\", \"union\", \"filter\", \"reverse\", \"intersection\", \"difference\", \"uniq\", \"zip\", \"indexOf\", \"find\", \"detect\", \"sortBy\", \"lastIndexOf\", \"range\", \"include\", \"each\", \"map\", \"reject\", \"all\", \"toArray\", \"pluck\"];\n\n  AS.require = function(framework, libraries) {\n    var library, _i, _len, _ref, _results;\n    if (framework == null) framework = \"alpha_simprini\";\n    if (libraries === void 0) {\n      return require(\"./alpha_simprini/\" + framework);\n    } else {\n      _ref = libraries.split(/\\s+/);\n      _results = [];\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        library = _ref[_i];\n        if (library.blank()) continue;\n        _results.push(require(\"./alpha_simprini/\" + framework + \"/\" + library));\n      }\n      return _results;\n    }\n  };\nminispade.require(\"./alpha_simprini/core\");\n\n}).call(this);\n\n})();\n//@ sourceURL=alpha_simprini");minispade.register('alpha_simprini/client', "(function() {(function() {\n  var AS, Client, _;\n\n  AS = require(\"alpha_simprini\");\n\n  Client = AS.part(\"Client\");\n\n  _ = require(\"underscore\");\n\n  Client.require(\"dom view view_model binding_group view_events\\n\\nbinding\\nbinding/container\\n\\n  binding/model binding/field binding/input binding/select binding/file\\n  binding/check_box binding/edit_line binding/one binding/many\\n\\nviews/panel views/region views/dialog\\n\\nmodels/targets\\n\\napplication\");\n\n}).call(this);\n\n})();\n//@ sourceURL=alpha_simprini/client");minispade.register('alpha_simprini/client/application', "(function() {(function() {\n  var $, AS, Taxi, domready, each, jwerty, _;\n\n  AS = require(\"alpha_simprini\");\n\n  Taxi = require(\"taxi\");\n\n  each = require(\"underscore\").each;\n\n  jwerty = require(\"jwerty\").jwerty;\n\n  domready = $ = require(\"jquery\");\n\n  _ = require(\"underscore\");\n\n  AS.Application = AS.Object.extend(function(_arg) {\n    var def, include;\n    def = _arg.def, include = _arg.include;\n    include(Taxi.Mixin);\n    def({\n      initialize: function(config) {\n        var _this = this;\n        if (config == null) config = {};\n        _.extend(this, config);\n        this.params = AS.params;\n        if (this.el == null) this.el = $(\"body\");\n        this.god_given_key_handlers();\n        return domready(function() {\n          return _this.boot();\n        });\n      }\n    });\n    def({\n      boot: function() {}\n    });\n    def({\n      god_given_key_handlers: function() {\n        var handlers,\n          _this = this;\n        handlers = {\n          '⎋': 'escape',\n          '⌘+↩': 'accept',\n          \"↩\": \"open\",\n          \"up\": \"up\",\n          \"down\": \"down\",\n          \"home\": \"first\",\n          \"end\": \"last\",\n          \"left\": \"left\",\n          \"right\": \"right\",\n          \"tab\": \"indent\",\n          \"shift+tab\": \"dedent\",\n          \"[a-z]/[0-9]/shift+[a-z]\": \"alphanum\"\n        };\n        each(handlers, function(trigger, key) {\n          return jwerty.key(key, (function(event) {\n            return _this.trigger(trigger, event);\n          }), _this.el);\n        });\n        return jwerty.key(\"backspace\", function(event) {\n          event.preventDefault();\n          return _this.trigger(\"delete\", event);\n        });\n      }\n    });\n    def({\n      view: function(constructor, options) {\n        if (options == null) options = {};\n        options.application = this;\n        return constructor[\"new\"](options);\n      }\n    });\n    return def({\n      append: function(view) {\n        return this.el.append(view.el);\n      }\n    });\n  });\n\n}).call(this);\n\n})();\n//@ sourceURL=alpha_simprini/client/application");minispade.register('alpha_simprini/client/binding', "(function() {(function() {\n  var AS, _,\n    __hasProp = Object.prototype.hasOwnProperty,\n    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };\n\n  AS = require(\"alpha_simprini\");\n\n  _ = require(\"underscore\");\n\n  AS.Binding = AS.Object.extend(function(_arg) {\n    var def;\n    def = _arg.def;\n    def({\n      initialize: function(context, model, field, options, fn) {\n        var _ref,\n          _this = this;\n        this.context = context;\n        this.model = model;\n        this.field = field;\n        this.options = options != null ? options : {};\n        this.fn = fn != null ? fn : void 0;\n        if (_.isString(this.field)) this.field = this.model[this.field];\n        if (_.isFunction(this.options)) {\n          _ref = [this.options, {}], this.fn = _ref[0], this.options = _ref[1];\n        }\n        if (this.container == null) {\n          this.container = this.context.$(this.context.currentNode);\n        }\n        this.bindingGroup = this.context.bindingGroup;\n        this.content = this.makeContent();\n        if (this.willGroupBindings()) {\n          this.context.groupBindings(function(bindingGroup) {\n            return _this.bindingGroup = bindingGroup;\n          });\n        }\n        return this.setup();\n      }\n    });\n    def({\n      makeContent: function() {\n        return this.context.$([]);\n      }\n    });\n    def({\n      willGroupBindings: function() {\n        return this.constructor.willGroupBindings || _.isFunction(this.fn);\n      }\n    });\n    def({\n      fieldValue: function() {\n        if (_.isArray(this.field)) {\n          return this.model.readPath(this.field);\n        } else {\n          return this.field.get();\n        }\n      }\n    });\n    def({\n      require_option: function(name) {\n        if (this.options[name] !== void 0) return;\n        throw new AS.Binding.MissingOption(\"You must specify the \" + name + \" option for \" + this.constructor.name + \" bindings.\");\n      }\n    });\n    return def({\n      setup: function() {}\n    });\n  });\n\n  AS.Binding.MissingOption = (function(_super) {\n\n    __extends(MissingOption, _super);\n\n    function MissingOption() {\n      MissingOption.__super__.constructor.apply(this, arguments);\n    }\n\n    return MissingOption;\n\n  })(Error);\n\n}).call(this);\n\n})();\n//@ sourceURL=alpha_simprini/client/binding");minispade.register('alpha_simprini/client/binding/check_box', "(function() {(function() {\n  var AS, _;\n\n  AS = require(\"alpha_simprini\");\n\n  _ = require(\"underscore\");\n\n  AS.Binding.CheckBox = AS.Binding.Input.extend(function(_arg) {\n    var def;\n    def = _arg.def;\n    def({\n      initialize: function(context, model, field, options, fn) {\n        if (options == null) options = {};\n        if (fn == null) fn = void 0;\n        options.type = \"checkbox\";\n        return this._super.apply(this, arguments);\n      }\n    });\n    def({\n      setContent: function() {\n        return this.content.attr(\"checked\", this.fieldValue());\n      }\n    });\n    def({\n      bindContent: function() {\n        return this.context.binds(this.content, \"change\", _.bind(this.setField, this));\n      }\n    });\n    return def({\n      setField: function() {\n        if (this.content.is(\":checked\")) {\n          return this.field.set(true);\n        } else {\n          return this.field.set(false);\n        }\n      }\n    });\n  });\n\n}).call(this);\n\n})();\n//@ sourceURL=alpha_simprini/client/binding/check_box");minispade.register('alpha_simprini/client/binding/container', "(function() {(function() {\n  var AS, jQuery;\n\n  AS = require(\"alpha_simprini\");\n\n  jQuery = require(\"jquery\");\n\n  AS.Binding.Container = AS.Object.extend(function(_arg) {\n    var def, defs, delegate, include;\n    delegate = _arg.delegate, include = _arg.include, def = _arg.def, defs = _arg.defs;\n    delegate('find', 'html', {\n      to: 'el'\n    });\n    def({\n      initialize: function(domElement) {\n        this.domElement = domElement;\n        this.el = jQuery(this.domElement);\n        return this.containerChildren = [];\n      }\n    });\n    def({\n      appendChild: function(child) {\n        if (child instanceof jQuery) {\n          this.containerChildren = this.containerChildren.concat(child);\n          return child.appendTo(this.domElement);\n        } else {\n          this.containerChildren.push(child);\n          return this.domElement.appendChild(child);\n        }\n      }\n    });\n    return def({\n      empty: function() {\n        jQuery(this.containerChildren).remove();\n        return this.containerChildren = [];\n      }\n    });\n  });\n\n}).call(this);\n\n})();\n//@ sourceURL=alpha_simprini/client/binding/container");minispade.register('alpha_simprini/client/binding/edit_line', "(function() {(function() {\n  var AS, _;\n\n  AS = require(\"alpha_simprini\");\n\n  _ = require(\"underscore\");\n\n  AS.Binding.EditLine = AS.Binding.extend(function(_arg) {\n    var def, transformDeleteCursor, transformInsertCursor;\n    def = _arg.def;\n    def({\n      rangy: require(\"rangy-core\")\n    });\n    def({\n      applyChange: function(doc, oldval, newval) {\n        var commonEnd, commonStart;\n        if (oldval === newval) return;\n        commonStart = 0;\n        while (oldval.charAt(commonStart) === newval.charAt(commonStart)) {\n          commonStart++;\n        }\n        commonEnd = 0;\n        while (oldval.charAt(oldval.length - 1 - commonEnd) === newval.charAt(newval.length - 1 - commonEnd) && commonEnd + commonStart < oldval.length && commonEnd + commonStart < newval.length) {\n          commonEnd++;\n        }\n        if (oldval.length !== commonStart + commonEnd) {\n          doc.del(commonStart, oldval.length - commonStart - commonEnd);\n        }\n        if (newval.length !== commonStart + commonEnd) {\n          return doc.insert(commonStart, newval.slice(commonStart, (newval.length - commonEnd)));\n        }\n      }\n    });\n    def(transformInsertCursor = function(text, position, cursor) {\n      if (position < cursor) {\n        return cursor + text.length;\n      } else {\n        return cursor;\n      }\n    });\n    def(transformDeleteCursor = function(text, position, cursor) {\n      if (position < cursor) {\n        return cursor - Math.min(text.length, cursor - position);\n      } else {\n        return cursor;\n      }\n    });\n    def({\n      initialize: function() {\n        var event, _i, _len, _ref, _results;\n        this._super.apply(this, arguments);\n        this.options.contentEditable = true;\n        this.content = this.makeContent();\n        this.elem = this.content[0];\n        this.elem.innerHTML = this.fieldValue();\n        this.previous_value = this.fieldValue();\n        this.selection = {\n          start: 0,\n          end: 0\n        };\n        this.context.binds(this.model, \"share:insert:\" + (_(this.field).last()), this.insert, this);\n        this.context.binds(this.model, \"share:delete:\" + (_(this.field).last()), this[\"delete\"], this);\n        this.context.binds(this.model, \"change:\" + (_(this.field).last()), this.updateUnlessFocused, this);\n        _ref = ['textInput', 'keydown', 'keyup', 'select', 'cut', 'paste', 'click', 'focus'];\n        _results = [];\n        for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n          event = _ref[_i];\n          _results.push(this.context.binds(this.content, event, this.generateOperation, this));\n        }\n        return _results;\n      }\n    });\n    def({\n      updateUnlessFocused: function(event) {\n        return _.defer(function() {\n          if (this.context.$(this.elem).closest(\":focus\")[0]) return;\n          return this.elem.innerHTML = this.fieldValue();\n        });\n      }\n    });\n    def({\n      makeContent: function() {\n        return this.context.$(this.context.span(this.options));\n      }\n    });\n    def({\n      replace_text: function(new_text) {\n        var range, scrollTop, selection, _ref;\n        if (new_text == null) new_text = \"\";\n        range = this.rangy.createRange();\n        selection = this.rangy.getSelection();\n        scrollTop = this.elem.scrollTop;\n        this.elem.innerHTML = new_text;\n        if (this.elem.scrollTop !== scrollTop) this.elem.scrollTop = scrollTop;\n        if (((_ref = selection.anchorNode) != null ? _ref.parentNode : void 0) !== this.elem) {\n          return;\n        }\n        range.setStart(selection.anchorNode || this.elem.childNodes[0] || this.elem, this.selection.start);\n        range.collapse(true);\n        return selection.setSingleRange(range);\n      }\n    });\n    def({\n      insert: function(model, position, text) {\n        this.selection.start = transformInsertCursor(text, position, this.selection.start);\n        this.selection.end = transformInsertCursor(text, position, this.selection.end);\n        return this.replace_text(this.elem.innerHTML.slice(0, position) + text + this.elem.innerHTML.slice(position));\n      }\n    });\n    def({\n      \"delete\": function(model, position, text) {\n        this.selection.start = transformDeleteCursor(text, position, this.selection.start);\n        this.selection.end = transformDeleteCursor(text, position, this.selection.end);\n        return this.replace_text(this.elem.innerHTML.slice(0, position) + this.elem.innerHTML.slice(position + text.length));\n      }\n    });\n    return def({\n      generateOperation: function() {\n        var range, selection;\n        selection = this.rangy.getSelection();\n        if (selection.rangeCount) {\n          range = this.rangy.getSelection().getRangeAt(0);\n        } else {\n          range = this.rangy.createRange();\n        }\n        this.selection.start = range.startOffset;\n        this.selection.end = range.endOffset;\n        if (this.elem.innerHTML !== this.previous_value) {\n          this.previous_value = this.elem.innerHTML;\n          this.applyChange(this.model.share.at(this.field), this.model.share.at(this.field).getText(), this.elem.innerHTML.replace(/\\r\\n/g, '\\n'));\n          return this.model[this.field](this.model.share.at(this.field).getText(), {\n            remote: true\n          });\n        }\n      }\n    });\n  });\n\n}).call(this);\n\n})();\n//@ sourceURL=alpha_simprini/client/binding/edit_line");minispade.register('alpha_simprini/client/binding/field', "(function() {(function() {\n  var AS, jQuery, _;\n\n  AS = require(\"alpha_simprini\");\n\n  _ = require(\"underscore\");\n\n  jQuery = require(\"jquery\");\n\n  AS.Binding.Field = AS.Binding.extend(function(_arg) {\n    var def;\n    def = _arg.def;\n    def({\n      initialize: function() {\n        this._super.apply(this, arguments);\n        this.setContent();\n        return this.bindContent();\n      }\n    });\n    def({\n      bindContent: function() {\n        return this.context.binds(this.field, \"change\", this.setContent, this);\n      }\n    });\n    def({\n      setContent: function() {\n        var fieldValue,\n          _this = this;\n        if (this.fn) {\n          this.content.empty();\n          this.bindingGroup.unbind();\n          fieldValue = this.fieldValue();\n          if (fieldValue === null) return;\n          if (fieldValue === void 0) return;\n          if (fieldValue === \"null\") return;\n          if (fieldValue === \"undefined\") return;\n          return this.context.withinBindingGroup(this.bindingGroup, function() {\n            return _this.context.withinNode(_this.content, function() {\n              var value, _ref, _ref2;\n              if (_.include((_ref = fieldValue.model) != null ? _ref.constructor.ancestors : void 0, AS.Model)) {\n                value = AS.ViewModel.build(_this.context, fieldValue.model);\n                return _this.fn.call(_this.context, value, AS.Binding.Model[\"new\"](_this.context, value, _this.container));\n              } else if (_.include((_ref2 = fieldValue.model) != null ? _ref2.constructor.ancestors : void 0, AS.ViewModel)) {\n                value = AS.ViewModel.build(_this.context, fieldValue.model.model);\n                return _this.fn.call(_this.context, value, AS.Binding.Model[\"new\"](_this.context, value, _this.container));\n              } else {\n                return _this.fn.call(_this.context);\n              }\n            });\n          });\n        } else {\n          return this.content.text(this.fieldValue());\n        }\n      }\n    });\n    return def({\n      makeContent: function() {\n        if (this.fn) {\n          return AS.Binding.Container[\"new\"](this.container[0]);\n        } else {\n          return this.context.$(this.context.span());\n        }\n      }\n    });\n  });\n\n}).call(this);\n\n})();\n//@ sourceURL=alpha_simprini/client/binding/field");minispade.register('alpha_simprini/client/binding/file', "(function() {(function() {\n  var AS, _;\n\n  _ = require(\"underscore\");\n\n  AS = require(\"alpha_simprini\");\n\n  AS.Binding.File = AS.Binding.Input.extend(function(_arg) {\n    var def, defs, delegate, include;\n    delegate = _arg.delegate, include = _arg.include, def = _arg.def, defs = _arg.defs;\n    def({\n      makeContent: function() {\n        var options;\n        options = _.clone(this.options);\n        options.type = \"file\";\n        return this.context.$(this.context.input(options));\n      }\n    });\n    def({\n      fieldValue: function() {}\n    });\n    def({\n      setContent: function() {}\n    });\n    return def({\n      readField: function() {\n        return AS.Models.File[\"new\"]({\n          file: this.content[0].files[0]\n        });\n      }\n    });\n  });\n\n}).call(this);\n\n})();\n//@ sourceURL=alpha_simprini/client/binding/file");minispade.register('alpha_simprini/client/binding/input', "(function() {(function() {\n  var AS, _;\n\n  AS = require(\"alpha_simprini\");\n\n  _ = require(\"underscore\");\n\n  AS.Binding.Input = AS.Binding.Field.extend(function(_arg) {\n    var def;\n    def = _arg.def;\n    def({\n      initialize: function() {\n        this._super.apply(this, arguments);\n        if (_.isArray(this.field)) {\n          return this.context.binds(this.model, this.field, this.setContent, this);\n        } else {\n          return this.context.binds(this.field, \"change\", this.setContent, this);\n        }\n      }\n    });\n    def({\n      makeContent: function() {\n        return this.context.$(this.context.input(this.options));\n      }\n    });\n    def({\n      bindContent: function() {\n        return this.context.binds(this.content, \"change\", this.setField, this);\n      }\n    });\n    def({\n      setContent: function() {\n        return this.content.val(this.fieldValue());\n      }\n    });\n    def({\n      readField: function() {\n        return this.content.val();\n      }\n    });\n    return def({\n      setField: function() {\n        if (_.isArray(this.field)) {\n          return this.model.writePath(this.field, this.readField());\n        } else {\n          return this.field.set(this.readField());\n        }\n      }\n    });\n  });\n\n}).call(this);\n\n})();\n//@ sourceURL=alpha_simprini/client/binding/input");minispade.register('alpha_simprini/client/binding/many', "(function() {(function() {\n  var AS, _;\n\n  AS = require(\"alpha_simprini\");\n\n  _ = require(\"underscore\");\n\n  AS.Binding.Many = AS.Binding.extend(function(_arg) {\n    var def;\n    def = _arg.def;\n    this.willGroupBindings = true;\n    def({\n      initialize: function() {\n        this._super.apply(this, arguments);\n        this.collection = this.field;\n        this.contents = {};\n        this.bindingGroups = {};\n        this.sorting = this.sortedModels();\n        this.makeAll();\n        this.context.binds(this.collection, \"add\", this.insertItem, this);\n        this.context.binds(this.collection, \"remove\", this.removeItem, this);\n        return this.context.binds(this.collection, \"change\", this.changeItem, this);\n      }\n    });\n    def({\n      makeAll: function() {\n        return this.sortedModels().each(_.bind(this.makeItemContent, this));\n      }\n    });\n    def({\n      sortedModels: function() {\n        var sortField;\n        if (sortField = this.options.order_by) {\n          return this.collection.sortBy(function(item) {\n            return item[sortField].get();\n          });\n        } else {\n          return this.collection;\n        }\n      }\n    });\n    def({\n      skipItem: function(item) {\n        var expectedValue, key, value, valueOnItem, _ref, _ref2;\n        if (!this.options.filter) return false;\n        _ref = this.options.filter;\n        for (key in _ref) {\n          value = _ref[key];\n          expectedValue = _([value]).flatten();\n          valueOnItem = (_ref2 = item[key]) != null ? _ref2.get() : void 0;\n          if (!_(expectedValue).include(valueOnItem)) return true;\n        }\n        return false;\n      }\n    });\n    def({\n      insertItem: function(item) {\n        var content, index, siblings, _base,\n          _this = this;\n        if (this.skipItem(item)) return;\n        content = this.context.danglingContent(function() {\n          return _this.makeItemContent(item);\n        });\n        index = typeof (_base = this.sortedModels().indexOf(item)).value === \"function\" ? _base.value() : void 0;\n        if (index == null) index = 0;\n        siblings = this.container.children();\n        if (!siblings.get(0)) {\n          this.container.append(content);\n        } else if (!siblings.get(index)) {\n          this.container.append(content);\n        } else {\n          this.context.$(siblings.get(index)).before(content);\n        }\n        if (window.DEBUG) debugger;\n        return this.sorting = this.sortedModels();\n      }\n    });\n    def({\n      removeItem: function(item) {\n        if (this.contents[item.cid]) {\n          this.contents[item.cid].remove();\n          delete this.contents[item.cid];\n          this.bindingGroups[item.cid].unbind();\n          delete this.bindingGroups[item.cid];\n        }\n        return this.sorting = this.sortedModels();\n      }\n    });\n    def({\n      moveItem: function(item) {\n        var content, currentIndex, newIndex, siblings;\n        content = this.contents[item.cid];\n        currentIndex = content.index();\n        newIndex = this.sortedModels().indexOf(item).value();\n        siblings = content.parent().children();\n        if (currentIndex < newIndex) {\n          return this.context.$(siblings[newIndex]).after(content);\n        } else if (newIndex < currentIndex) {\n          return this.context.$(siblings[newIndex]).before(content);\n        }\n      }\n    });\n    def({\n      changeItem: function(item) {\n        if (this.options.order_by && this.sorting.indexOf(item).value() !== this.sortedModels().indexOf(item).value()) {\n          this.moveItem(item);\n          this.sorting = this.sortedModels();\n        }\n        if (this.skipItem(item)) {\n          return this.removeItem(item);\n        } else if (this.contents[item.cid] === void 0) {\n          return this.insertItem(item);\n        }\n      }\n    });\n    def({\n      makeItemContent: function(item) {\n        var content,\n          _this = this;\n        if (!item) return;\n        if (this.skipItem(item)) return;\n        content = this.context.$([]);\n        this.context.withinBindingGroup(this.bindingGroup, function() {\n          return _this.context.groupBindings(function() {\n            var binding, made;\n            _this.bindingGroups[item.cid] = _this.context.bindingGroup;\n            binding = AS.Binding.Model[\"new\"](_this.context, item, content);\n            made = _this.fn.call(_this.context, AS.ViewModel.build(_this.context, item), binding);\n            if (made != null ? made.jquery : void 0) {\n              content.push(made[0]);\n            } else {\n              content.push(made);\n            }\n            return binding.paint();\n          });\n        });\n        this.contents[item.cid] = content;\n        return content;\n      }\n    });\n    return def({\n      makeContent: function() {\n        return AS.Binding.Container[\"new\"](this.container[0]);\n      }\n    });\n  });\n\n}).call(this);\n\n})();\n//@ sourceURL=alpha_simprini/client/binding/many");minispade.register('alpha_simprini/client/binding/model', "(function() {(function() {\n  var $, AS, _;\n\n  AS = require(\"alpha_simprini\");\n\n  _ = require(\"underscore\");\n\n  $ = require(\"jquery\");\n\n  AS.Binding.Model = AS.Object.extend(function(_arg) {\n    var def;\n    def = _arg.def;\n    def({\n      initialize: function(context, model, content) {\n        this.context = context;\n        this.model = model;\n        this.content = content != null ? content : $([]);\n        this.styles = {};\n        return this.attrs = {};\n      }\n    });\n    def({\n      css: function(properties) {\n        var options, property, _results,\n          _this = this;\n        _results = [];\n        for (property in properties) {\n          options = properties[property];\n          _results.push((function(property, options) {\n            var painter;\n            if (_.isArray(options)) {\n              _this.styles[property] = function() {\n                return _this.model.readPath(options);\n              };\n              painter = function() {\n                return _.defer(function() {\n                  var value;\n                  value = _this.styles[property]();\n                  return _this.content.css(property, value);\n                });\n              };\n              return _this.context.binds(_this.model, options, painter, _this);\n            } else {\n              _this.styles[property] = function() {\n                return options.fn(_this.model);\n              };\n              painter = function() {\n                return _.defer(function() {\n                  return _this.content.css(property, _this.styles[property]());\n                });\n              };\n              return _this.context.binds(_this.model, options.field, painter, _this);\n            }\n          })(property, options));\n        }\n        return _results;\n      }\n    });\n    def({\n      attr: function(attrs) {\n        var options, property, _results,\n          _this = this;\n        _results = [];\n        for (property in attrs) {\n          options = attrs[property];\n          _results.push((function(property, options) {\n            var bindingPath, painter;\n            if (_.isArray(options)) {\n              _this.attrs[property] = function() {\n                var value;\n                value = _this.model.readPath(options);\n                if (value === true) {\n                  return \"yes\";\n                } else if (value === false) {\n                  return \"no\";\n                } else {\n                  return value;\n                }\n              };\n              painter = function() {\n                return _.defer(function() {\n                  return _this.content.attr(property, _this.attrs[property]());\n                });\n              };\n              bindingPath = options;\n              return _this.context.binds(_this.model, bindingPath, painter, _this);\n            } else {\n              _this.attrs[property] = function() {\n                if (options.fn) {\n                  return options.fn(_this.model);\n                } else {\n                  if (_this.model[options.field].get()) {\n                    return \"yes\";\n                  } else {\n                    return \"no\";\n                  }\n                }\n              };\n              painter = function() {\n                return _.defer(function() {\n                  return _this.content.attr(property, _this.attrs[property]());\n                });\n              };\n              return _this.context.binds(_this.model, options.field, painter, _this);\n            }\n          })(property, options));\n        }\n        return _results;\n      }\n    });\n    return def({\n      paint: function() {\n        var attrs, fn, key, property, styles, _ref, _ref2;\n        attrs = {};\n        _ref = this.attrs;\n        for (key in _ref) {\n          fn = _ref[key];\n          attrs[key] = fn();\n        }\n        styles = {};\n        _ref2 = this.styles;\n        for (property in _ref2) {\n          fn = _ref2[property];\n          styles[property] = fn();\n        }\n        this.content.attr(attrs);\n        this.content.css(styles);\n        if (this.width_fn) this.content.width(this.width_fn());\n        if (this.height_fn) return this.content.height(this.height_fn());\n      }\n    });\n  });\n\n}).call(this);\n\n})();\n//@ sourceURL=alpha_simprini/client/binding/model");minispade.register('alpha_simprini/client/binding/one', "(function() {(function() {\n  var AS, jQuery, _;\n\n  AS = require(\"alpha_simprini\");\n\n  _ = require(\"underscore\");\n\n  jQuery = require(\"jquery\");\n\n  AS.Binding.One = AS.Binding.Field.extend(function(_arg) {\n    var def, defs, delegate, include;\n    delegate = _arg.delegate, include = _arg.include, def = _arg.def, defs = _arg.defs;\n    def({\n      makeContent: function() {\n        return AS.Binding.Container[\"new\"](this.container[0]);\n      }\n    });\n    return def({\n      setContent: function() {\n        var value,\n          _this = this;\n        this.content.empty();\n        this.bindingGroup.unbind();\n        if ((value = this.fieldValue()) && this.fn) {\n          if (_.include(value.constructor.ancestors, AS.Model)) {\n            value = AS.ViewModel.build(this.context, value);\n          }\n          return this.context.withinBindingGroup(this.bindingGroup, function() {\n            return _this.context.withinNode(_this.content, function() {\n              return _this.fn.call(_this.context, value, AS.Binding.Model[\"new\"](_this.context, _this.model, _this.container));\n            });\n          });\n        }\n      }\n    });\n  });\n\n}).call(this);\n\n})();\n//@ sourceURL=alpha_simprini/client/binding/one");minispade.register('alpha_simprini/client/binding/select', "(function() {(function() {\n  var AS, _;\n\n  AS = require(\"alpha_simprini\");\n\n  _ = require(\"underscore\");\n\n  AS.Binding.Select = AS.Binding.Input.extend(function(_arg) {\n    var def;\n    def = _arg.def;\n    def({\n      initialize: function() {\n        this._super.apply(this, arguments);\n        return this.require_option(\"options\");\n      }\n    });\n    def({\n      makeContent: function() {\n        var options, _ref;\n        if ((_ref = this.select) != null) _ref.remove();\n        options = this.options.options;\n        return this.select = this.context.$(this.context.select(function() {\n          var key, option, value, _i, _len, _results, _results2;\n          if (_.isArray(options)) {\n            _results = [];\n            for (_i = 0, _len = options.length; _i < _len; _i++) {\n              option = options[_i];\n              _results.push(this.option(option.toString()));\n            }\n            return _results;\n          } else {\n            _results2 = [];\n            for (key in options) {\n              value = options[key];\n              _results2.push(this.option({\n                value: value\n              }, function() {\n                return key;\n              }));\n            }\n            return _results2;\n          }\n        }));\n      }\n    });\n    def({\n      setContent: function() {\n        var fieldValue;\n        fieldValue = this.fieldValue();\n        if (fieldValue != null ? fieldValue.id : void 0) {\n          fieldValue = fieldValue.id;\n        }\n        return this.content.val(fieldValue);\n      }\n    });\n    return def({\n      setField: function() {\n        var value;\n        value = this.select.val();\n        value = _.isArray(value) ? value[0] : value;\n        if (_.isArray(this.field)) {\n          return this.model.writePath(this.field, value);\n        } else {\n          return this.field.set(value);\n        }\n      }\n    });\n  });\n\n}).call(this);\n\n})();\n//@ sourceURL=alpha_simprini/client/binding/select");minispade.register('alpha_simprini/client/binding_group', "(function() {(function() {\n  var AS, _;\n\n  AS = require(\"alpha_simprini\");\n\n  _ = require(\"underscore\");\n\n  AS.BindingGroup = AS.Object.extend(function(_arg) {\n    var def;\n    def = _arg.def;\n    def({\n      initialize: function(parentGroup) {\n        this.parentGroup = parentGroup;\n        this.namespace = _.uniqueId(\"bg\");\n        this.children = [];\n        return this.boundObjects = [];\n      }\n    });\n    def({\n      unbind: function() {\n        var object, _i, _len, _ref;\n        _ref = this.boundObjects;\n        for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n          object = _ref[_i];\n          object.unbind(\".\" + this.namespace);\n        }\n        return this.unbindChildren();\n      }\n    });\n    def({\n      unbindChildren: function() {\n        var child, _i, _len, _ref;\n        _ref = this.children;\n        for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n          child = _ref[_i];\n          child.unbind();\n        }\n        return this.children = [];\n      }\n    });\n    def({\n      binds: function(object, event, handler, context) {\n        this.boundObjects.push(object);\n        if (object.jquery) {\n          return object.bind(\"\" + event + \".\" + this.namespace, _.bind(handler, context));\n        } else if (_.isArray(event)) {\n          return object.bindPath(event, _.bind(handler, context));\n        } else {\n          return object.bind({\n            event: event,\n            namespace: this.namespace,\n            handler: handler,\n            context: context\n          });\n        }\n      }\n    });\n    def({\n      addChild: function(child) {\n        if (child == null) child = AS.BindingGroup[\"new\"](this);\n        this.children.push(child);\n        return child;\n      }\n    });\n    return def({\n      removeChild: function(bindingGroup) {\n        return this.children = _(this.children).without(bindingGroup);\n      }\n    });\n  });\n\n}).call(this);\n\n})();\n//@ sourceURL=alpha_simprini/client/binding_group");minispade.register('alpha_simprini/client/dom', "(function() {(function() {\n  var $, AS, DOM_ELEMENTS, SVG, SVG_ELEMENTS, _;\n\n  AS = require(\"alpha_simprini\");\n\n  _ = require(\"underscore\");\n\n  $ = require(\"jquery\");\n\n  SVG = {\n    ns: \"http://www.w3.org/2000/svg\"\n  };\n\n  DOM_ELEMENTS = _('a abbr address article aside audio b bdi bdo blockquote body button\\\n  canvas caption cite code colgroup datalist dd del details dfn div dl dt em\\\n  fieldset figcaption figure footer form h1 h2 h3 h4 h5 h6 head header hgroup\\\n  html i iframe ins kbd label legend li map mark menu meter nav noscript object\\\n  ol optgroup option output p pre progress q rp rt ruby s samp script section\\\n  select small span strong style sub summary sup table tbody td textarea tfoot\\\n  th thead time title tr u ul video area base br col command embed hr img input\\\n  keygen link meta paramsource track wbr\\\n'.split(\" \")).chain().compact();\n\n  SVG_ELEMENTS = _('\\\n  svg g defs desc title metadata symbol use switch image style path rect circle\\\n  line ellipse polyline polygon text tspan tref textPath altGlyph altGlyphDef\\\n  altGlyphItem glyphRef marker color-profile linearGradient radialGradient stop\\\n  pattern clipPath mask filter feBlend feColorMatrix feComponentTransfer feComposite\\\n  feConvolveMatrix feDiffuseLighting feDisplacementMap feFlood feGaussianBlur feImage\\\n  feMerge feMergeNode feMorphology feOffset feSpecularLighting feTile feTurbulence\\\n  feDistantLight fePointLight feSpotLight feFuncR feFuncG feFuncB feFuncA cursor a view\\\n  script animate set animateMotion animateColor animateTransform mpath font font-face\\\n  glyph missing-glyph hkern vkern font-face-src font-face-uri font-face-format\\\n  font-face-name definition-src foreignObject\\\n'.split(\" \")).chain().compact();\n\n  AS.DOM = AS.Object.extend(function(_arg) {\n    var def, defs, delegate, include;\n    delegate = _arg.delegate, include = _arg.include, def = _arg.def, defs = _arg.defs;\n    def({\n      $: $\n    });\n    def({\n      text: function(textContent) {\n        return this.currentNode.appendChild(document.createTextNode(textContent));\n      }\n    });\n    def({\n      raw: function(html) {\n        return this.$(this.span()).html(html);\n      }\n    });\n    def({\n      tag: function(name, attrs, content) {\n        var node;\n        node = document.createElement(name);\n        return this._tag(node, attrs, content);\n      }\n    });\n    def({\n      svgTag: function(name, attrs, content) {\n        var node;\n        node = document.createElementNS(SVG.ns, name);\n        return this._tag(node, attrs, content);\n      }\n    });\n    def({\n      _tag: function(node, attrs, content) {\n        var key, textContent, value, _ref;\n        if (this.currentNode == null) {\n          this.currentNode = document.createDocumentFragment();\n        }\n        if (_.isFunction(attrs)) {\n          content = attrs;\n          attrs = void 0;\n        }\n        if (_.isString(attrs)) {\n          textContent = attrs;\n          attrs = void 0;\n        }\n        _ref = attrs || {};\n        for (key in _ref) {\n          value = _ref[key];\n          if (this.process_attr) {\n            this.process_attr(node, key, value);\n          } else {\n            node.setAttribute(key, value);\n          }\n        }\n        this.currentNode.appendChild(node);\n        if (textContent) {\n          this.$(node).text(textContent);\n        } else if (content) {\n          this.withinNode(node, function() {\n            var last;\n            last = content.call(this);\n            if (_.isString(last)) return this.text(last);\n          });\n        }\n        return node;\n      }\n    });\n    def({\n      withinNode: function(node, fn) {\n        var content, priorNode;\n        if (node != null ? node.jquery : void 0) node = node[0];\n        priorNode = this.currentNode;\n        this.currentNode = node;\n        content = fn.call(this);\n        this.currentNode = priorNode;\n        return content;\n      }\n    });\n    return def({\n      danglingContent: function(fn) {\n        return this.withinNode(null, fn);\n      }\n    });\n  });\n\n  DOM_ELEMENTS.each(function(element) {\n    return AS.DOM.prototype[element] = function() {\n      return this.tag.apply(this, _(arguments).unshift(element));\n    };\n  });\n\n  SVG_ELEMENTS.each(function(element) {\n    var htmlSvgConflict, methodConflict, safeElement;\n    htmlSvgConflict = ~DOM_ELEMENTS.value().indexOf(element);\n    methodConflict = AS.DOM.prototype[element] != null;\n    if (htmlSvgConflict || methodConflict) safeElement = \"svg_\" + element;\n    return AS.DOM.prototype[safeElement || element] = function() {\n      return this.svgTag.apply(this, _(arguments).unshift(element));\n    };\n  });\n\n}).call(this);\n\n})();\n//@ sourceURL=alpha_simprini/client/dom");minispade.register('alpha_simprini/client/models/targets', "(function() {(function() {\n  var $, AS, BOTTOM, LEFT, MIDDLE, RIGHT, TOP, Taxi;\n\n  AS = require(\"alpha_simprini\");\n\n  $ = require(\"jquery\");\n\n  Taxi = require(\"taxi\");\n\n  TOP = {\n    name: \"TOP\",\n    toString: function() {\n      return this.name;\n    }\n  };\n\n  MIDDLE = {\n    name: \"MIDDLE\",\n    toString: function() {\n      return this.name;\n    }\n  };\n\n  BOTTOM = {\n    name: \"BOTTOM\",\n    toString: function() {\n      return this.name;\n    }\n  };\n\n  LEFT = {\n    name: \"LEFT\",\n    toString: function() {\n      return this.name;\n    }\n  };\n\n  RIGHT = {\n    name: \"RIGHT\",\n    toString: function() {\n      return this.name;\n    }\n  };\n\n  AS.Models.Targets = AS.Object.extend(function(_arg) {\n    var def, defs, include;\n    def = _arg.def, defs = _arg.defs, include = _arg.include;\n    include(Taxi.Mixin);\n    def({\n      TOP: TOP\n    });\n    def({\n      MIDDLE: MIDDLE\n    });\n    def({\n      BOTTOM: BOTTOM\n    });\n    def({\n      LEFT: LEFT\n    });\n    def({\n      RIGHT: RIGHT\n    });\n    def({\n      initialize: function() {\n        return this.gather();\n      }\n    });\n    def({\n      gather: function() {\n        return this.targets = $(this.selector).map(function(i, el) {\n          return {\n            el: $(el),\n            rect: el.getBoundingClientRect()\n          };\n        });\n      }\n    });\n    def({\n      validate: function() {\n        return true;\n      }\n    });\n    def({\n      dropstart: function() {\n        var _ref;\n        if (!((_ref = this.current_hit) != null ? _ref.rect : void 0)) return;\n        return this.trigger(\"dropstart\", this.current_hit);\n      }\n    });\n    def({\n      dropend: function() {\n        return this.trigger(\"dropend\");\n      }\n    });\n    def({\n      drop: function(event) {}\n    });\n    def({\n      dragend: function(event) {\n        var _ref;\n        if (!((_ref = this.current_hit) != null ? _ref.rect : void 0)) return;\n        this.drop(event);\n        return this.trigger(\"drop\", this.current_hit);\n      }\n    });\n    def({\n      transition_hit: function(hit) {\n        if (hit === null) return this.dropend();\n        if (this.current_hit == null) {\n          this.current_hit = AS.Models.Targets.Hit[\"new\"]();\n        }\n        if (this.current_hit.equals(hit) || hit.rect === void 0) return;\n        this.dropend();\n        this.current_hit = hit;\n        return this.dropstart();\n      }\n    });\n    return def({\n      drag: function(event) {\n        throw \"Drag unimplimented in base class!\";\n      }\n    });\n  });\n\n  AS.Models.Targets.TOP = TOP;\n\n  AS.Models.Targets.MIDDLE = MIDDLE;\n\n  AS.Models.Targets.BOTTOM = BOTTOM;\n\n  AS.Models.Targets.LEFT = LEFT;\n\n  AS.Models.Targets.RIGHT = RIGHT;\n\n  AS.Models.Targets.Edge = AS.Models.Targets.extend(function(_arg) {\n    var def;\n    def = _arg.def;\n    def({\n      initialize: function(options) {\n        if (options == null) options = {};\n        this._super();\n        return this.edge = options.edge || 30;\n      }\n    });\n    def({\n      horizontal_target: function(event) {\n        var clientX, clientY, edge, rect, target, withinX, withinY, _i, _len, _ref, _ref2;\n        _ref = event[\"jquery/event\"].originalEvent, clientX = _ref.clientX, clientY = _ref.clientY;\n        _ref2 = this.targets;\n        for (_i = 0, _len = _ref2.length; _i < _len; _i++) {\n          target = _ref2[_i];\n          rect = target.rect;\n          withinX = (rect.left - this.edge <= clientX && clientX <= rect.right + this.edge);\n          withinY = (rect.top <= clientY && clientY <= rect.bottom);\n          if (!(withinX && withinY)) continue;\n          edge = (rect.left - this.edge <= clientX && clientX <= rect.left + this.edge) ? this.LEFT : (rect.left + this.edge <= clientX && clientX >= rect.right - this.edge) ? this.RIGHT : void 0;\n          break;\n        }\n        if (!edge) return null;\n        return AS.Models.Targets.Hit[\"new\"](target.rect, target.el, edge);\n      }\n    });\n    return def({\n      vertical_target: function(event) {\n        var clientX, clientY, edge, rect, target, withinX, withinY, _i, _len, _ref, _ref2;\n        _ref = event[\"jquery/event\"].originalEvent, clientX = _ref.clientX, clientY = _ref.clientY;\n        _ref2 = this.targets;\n        for (_i = 0, _len = _ref2.length; _i < _len; _i++) {\n          target = _ref2[_i];\n          rect = target.rect;\n          withinX = (rect.left <= clientX && clientX <= rect.right);\n          withinY = (rect.top - this.edge <= clientY && clientY <= rect.bottom + this.edge);\n          if (!(withinX && withinY)) continue;\n          edge = (rect.top - this.edge <= clientY && clientY <= rect.top + this.edge) ? this.TOP : (rect.bottom - this.edge <= clientY && clientY <= rect.bottom + this.edge) ? this.BOTTOM : void 0;\n          break;\n        }\n        if (!edge) return null;\n        return AS.Models.Targets.Hit[\"new\"](target.rect, target.el, edge);\n      }\n    });\n  });\n\n  AS.Models.Targets.Thirds = AS.Models.Targets.extend(function(_arg) {\n    var def;\n    def = _arg.def;\n    def({\n      within_vertically: function(y, rect) {\n        return (rect.top <= y && y <= rect.bottom);\n      }\n    });\n    def({\n      which_third: function(y, rect) {\n        var offset, one_third;\n        one_third = rect.height / 3;\n        offset = y - rect.top;\n        if (offset <= one_third) {\n          return this.TOP;\n        } else if (offset <= one_third * 2) {\n          return this.MIDDLE;\n        } else {\n          return this.BOTTOM;\n        }\n      }\n    });\n    def({\n      target: function(event) {\n        var clientY, hit, target, _i, _len, _ref;\n        clientY = event[\"jquery/event\"].originalEvent.clientY;\n        _ref = this.targets;\n        for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n          target = _ref[_i];\n          if (this.within_vertically(clientY, target.rect)) {\n            hit = AS.Models.Targets.Hit[\"new\"](target.rect, target.el, this.which_third(clientY, target.rect), event);\n            if (this.validate(hit)) return hit;\n          }\n        }\n        return null;\n      }\n    });\n    return def({\n      drag: function(event) {\n        return this.transition_hit(this.target(event));\n      }\n    });\n  });\n\n  AS.Models.Targets.Hit = AS.Object.extend(function(_arg) {\n    var def;\n    def = _arg.def;\n    def({\n      TOP: TOP\n    });\n    def({\n      MIDDLE: MIDDLE\n    });\n    def({\n      BOTTOM: BOTTOM\n    });\n    def({\n      LEFT: LEFT\n    });\n    def({\n      RIGHT: RIGHT\n    });\n    def({\n      initialize: function(rect, el, section, event) {\n        this.rect = rect != null ? rect : null;\n        this.el = el != null ? el : null;\n        this.section = section != null ? section : null;\n        this.event = event;\n      }\n    });\n    return def({\n      equals: function(other) {\n        if (other == null) other = AS.Models.Targets.Hit[\"new\"]();\n        return other.el === this.el && other.section === this.section;\n      }\n    });\n  });\n\n}).call(this);\n\n})();\n//@ sourceURL=alpha_simprini/client/models/targets");minispade.register('alpha_simprini/client/view', "(function() {(function() {\n  var AS, Taxi, fleck, _,\n    __slice = Array.prototype.slice;\n\n  AS = require(\"alpha_simprini\");\n\n  Taxi = require(\"taxi\");\n\n  _ = require(\"underscore\");\n\n  fleck = require(\"fleck\");\n\n  AS.View = AS.DOM.extend(function(_arg) {\n    var def, defs, delegate, include;\n    delegate = _arg.delegate, include = _arg.include, def = _arg.def, defs = _arg.defs;\n    include(Taxi.Mixin);\n    include(AS.Callbacks);\n    this.defineCallbacks({\n      after: ['content'],\n      before: ['content']\n    });\n    delegate('addClass', 'removeClass', 'show', 'hide', 'html', 'find', {\n      to: \"el\"\n    });\n    def({\n      tagName: \"div\"\n    });\n    def({\n      attrBindings: null\n    });\n    def({\n      _ensureElement: function() {\n        var baseAttributes;\n        if (this.el == null) this.el = this.$(this.buildElement());\n        baseAttributes = this.baseAttributes();\n        if (this.el.attr(\"class\")) baseAttributes[\"class\"] = void 0;\n        if (this.el.attr(\"id\")) baseAttributes[\"id\"] = void 0;\n        this.el.attr(baseAttributes);\n        return this.el.data().view = this;\n      }\n    });\n    def({\n      initialize: function(config) {\n        var key, value, _ref;\n        if (config == null) config = {};\n        if (config.el && !config.el.jquery) config.el = this.$(config.el);\n        this.cid = _.uniqueId(\"c\");\n        for (key in config) {\n          value = config[key];\n          if ((value != null ? value.model : void 0) instanceof AS.Model) {\n            this[key] = AS.ViewModel.build(this, value.model);\n          } else {\n            this[key] = value;\n          }\n        }\n        this.childViews = [];\n        this.bindingGroup = AS.BindingGroup[\"new\"]((_ref = this.parentVew) != null ? _ref.bindingGroup : void 0);\n        this._ensureElement();\n        this.currentNode = this.el[0];\n        this.runCallbacks(\"beforeContent\");\n        this.content();\n        this.delegateEvents();\n        this.bindAttrs();\n        return this.runCallbacks(\"afterContent\");\n      }\n    });\n    def({\n      content: function() {}\n    });\n    def({\n      append: function(view) {\n        return this.el.append(view.el);\n      }\n    });\n    def({\n      processAttr: function(node, key, value) {\n        return node.setAttribute(key, value);\n      }\n    });\n    def({\n      groupBindings: function(fn) {\n        return this.withinBindingGroup(this.bindingGroup.addChild(), fn);\n      }\n    });\n    def({\n      withinBindingGroup: function(bindingGroup, fn) {\n        var content, currentGroup;\n        currentGroup = this.bindingGroup;\n        this.bindingGroup = bindingGroup;\n        content = fn.call(this, bindingGroup);\n        this.bindingGroup = currentGroup;\n        return content;\n      }\n    });\n    def({\n      binds: function() {\n        return this.bindingGroup.binds.apply(this.bindingGroup, arguments);\n      }\n    });\n    def({\n      klassString: function() {\n        var ancestor, classes, _i, _len, _ref;\n        classes = [];\n        _ref = this.constructor.ancestors;\n        for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n          ancestor = _ref[_i];\n          if (!ancestor.path().match(/Views?/)) continue;\n          classes.push(ancestor._name());\n        }\n        return classes.join(\" \");\n      }\n    });\n    def({\n      baseAttributes: function() {\n        var attrs;\n        return attrs = {\n          \"class\": this.klassString(),\n          id: this.objectId()\n        };\n      }\n    });\n    def({\n      buildElement: function() {\n        return this.currentNode = this[this.tagName]();\n      }\n    });\n    def({\n      view: function(constructor, options) {\n        var view, _ref;\n        if (options == null) options = {};\n        options.application = this.application;\n        options.parentView = this;\n        view = constructor[\"new\"](options);\n        this.childViews.push(view);\n        this.bindingGroup.addChild(view);\n        if ((_ref = this.currentNode) != null) _ref.appendChild(view.el[0]);\n        return view.el[0];\n      }\n    });\n    def({\n      descendantViews: function(views, constructor) {\n        var view, _i, _len, _ref;\n        if (views == null) views = [];\n        _ref = this.childViews;\n        for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n          view = _ref[_i];\n          if (constructor) {\n            if (view instanceof constructor) views.push(view);\n          } else {\n            views.push(view);\n          }\n          view.descendantViews(views, constructor);\n        }\n        return views;\n      }\n    });\n    def({\n      removeChild: function(child) {\n        return this.childViews = _.without(this.childViews, child);\n      }\n    });\n    def({\n      unbind: function() {\n        return this._super.apply(this, arguments);\n      }\n    });\n    def({\n      binding: function(bindable, options, fnOrElement) {\n        if (bindable instanceof AS.Collection || bindable instanceof AS.Model.HasMany.Instance) {\n          return AS.Binding.Many[\"new\"](this, bindable, bindable, options, fnOrElement);\n        } else if (bindable instanceof AS.Model) {\n          return AS.Binding.Model[\"new\"](this, bindable, options || fnOrElement);\n        }\n      }\n    });\n    def({\n      modelBinding: function() {\n        var _ref;\n        return (_ref = this._modelBinding) != null ? _ref : this._modelBinding = AS.Binding.Model[\"new\"](this, this.model, this.el);\n      }\n    });\n    def({\n      bindAttrs: function() {\n        if (!this.attrBindings) return;\n        return this.modelBinding().attr(this.attrBindings);\n      }\n    });\n    def({\n      delegateEvents: function() {\n        var key, state, stateEvents, _i, _len, _ref, _results,\n          _this = this;\n        if (this.events) {\n          this.standardEvents = AS.ViewEvents[\"new\"](this, this.events);\n          this.standardEvents.applyBindings();\n        }\n        stateEvents = _(this.constructor.prototype).chain().keys().filter(function(key) {\n          return _(key).endsWith(\"_events\");\n        });\n        this.stateEvents = {};\n        _ref = stateEvents.value();\n        _results = [];\n        for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n          key = _ref[_i];\n          state = key.replace(/_events$/, '');\n          _results.push((function(key, state) {\n            _this.stateEvents[state] = AS.ViewEvents[\"new\"](_this, _this[key]);\n            _this[\"exit_\" + state] = function() {\n              this.trigger(\"exitstate:\" + state);\n              return this.stateEvents[state].revokeBindings();\n            };\n            return _this[\"enter_\" + state] = function() {\n              this.trigger(\"enterstate:\" + state);\n              return this.stateEvents[state].applyBindings();\n            };\n          })(key, state));\n        }\n        return _results;\n      }\n    });\n    def({\n      pluralize: function(thing, count) {\n        if (count === -1 || count === 1) {\n          return fleck.singularize(thing);\n        } else {\n          return fleck.pluralize(thing);\n        }\n      }\n    });\n    def({\n      reset_cycle: function() {\n        var args;\n        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n        if (this._cycles) return delete this._cycles[args.join()];\n      }\n    });\n    def({\n      cycle: function() {\n        var args, count, _base, _name;\n        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n        if (this._cycles == null) this._cycles = {};\n        if ((_base = this._cycles)[_name = args.join()] == null) _base[_name] = 0;\n        count = this._cycles[args.join()] += 1;\n        return args[count % args.length];\n      }\n    });\n    def({\n      toggle: function() {\n        this.button({\n          \"class\": \"toggle expand\"\n        });\n        return this.button({\n          \"class\": \"toggle collapse\"\n        });\n      }\n    });\n    def({\n      field: function(_label, options, fn) {\n        if (options == null) options = {};\n        if (fn == null) fn = function() {};\n        if (_.isFunction(options)) {\n          fn = options;\n          options = {};\n        }\n        return this.div(function() {\n          this.label(_label);\n          this.input(options);\n          return fn != null ? fn.call(this) : void 0;\n        });\n      }\n    });\n    return def({\n      choice: function(_label, options, fn) {\n        if (options == null) options = {};\n        if (fn == null) fn = function() {};\n        if (_.isFunction(options)) {\n          fn = options;\n          options = {};\n        }\n        options.type = \"checkbox\";\n        return this.field(_label, options, fn);\n      }\n    });\n  });\n\n}).call(this);\n\n})();\n//@ sourceURL=alpha_simprini/client/view");minispade.register('alpha_simprini/client/view_events', "(function() {(function() {\n  var AS, _;\n\n  AS = require(\"alpha_simprini\");\n\n  _ = require(\"underscore\");\n\n  AS.ViewEvents = AS.Object.extend(function(_arg) {\n    var EVENT_SPLITTER, def;\n    def = _arg.def;\n    EVENT_SPLITTER = /^(@?[\\w:]+)\\s*(.*)$/;\n    def({\n      initialize: function(view, events) {\n        this.view = view;\n        this.namespace = _.uniqueId(\".ve\");\n        this.events = this.unifyOptions(events);\n        this.validateOptions();\n        return this.cacheHandlers();\n      }\n    });\n    def({\n      unifyOptions: function(events) {\n        var eventName, key, options, selector, __, _ref;\n        for (key in events) {\n          options = events[key];\n          if (_.isString(options)) {\n            options = events[key] = {\n              methodName: options\n            };\n          }\n          _ref = key.match(EVENT_SPLITTER), __ = _ref[0], eventName = _ref[1], selector = _ref[2];\n          options.eventName = eventName + this.namespace;\n          options.selector = selector;\n          options.method = this.view[options.methodName];\n        }\n        return events;\n      }\n    });\n    def({\n      validateOptions: function() {\n        var key, options, _ref, _results;\n        _ref = this.events;\n        _results = [];\n        for (key in _ref) {\n          options = _ref[key];\n          if (options.method && options.transition) {\n            throw new Error(\"Event Binding Error in \" + this.view.constructor.name + \"!\\nSpecified both method and transition for event \" + key + \".\\nUse before/after hooks for transitions instead.\");\n          }\n          if (!options.method && !options.transition) {\n            throw new Error(\"Event Binding Error in \" + this.view.constructor.name + \"!\\nSpecified neither method or transition for event \" + key + \".\\nSpecify what to do when handling this error.\\nDo you need to define the method: `\" + options.methodName + \"'?\");\n          }\n          if (options.method && !_.isFunction(options.method)) {\n            console.error(options.method, \"was given instead of a function.\");\n            throw new Error(\"Event Binding Error in \" + this.view.constructor.name + \"!\\nSpecified method for event \" + key + \" that is not a function.\\nSpecify only a function as a method for an event handler.\");\n          } else {\n            _results.push(void 0);\n          }\n        }\n        return _results;\n      }\n    });\n    def({\n      cacheHandlers: function() {\n        var key, options, _ref, _results,\n          _this = this;\n        _ref = this.events;\n        _results = [];\n        for (key in _ref) {\n          options = _ref[key];\n          _results.push((function(key, options) {\n            return options.handler = function(_, event) {\n              if (options.method) {\n                return options.method.apply(_this.view, arguments);\n              } else if (options.transition) {\n                return _this.view.transitionState(options.transition);\n              }\n            };\n          })(key, options));\n        }\n        return _results;\n      }\n    });\n    def({\n      revokeBindings: function() {\n        var key, options, _ref, _results;\n        _ref = this.events;\n        _results = [];\n        for (key in _ref) {\n          options = _ref[key];\n          _results.push(this.revokeBinding(options));\n        }\n        return _results;\n      }\n    });\n    def({\n      revokeBinding: function(options) {\n        var eventName, selector, target, _ref, _ref2;\n        _ref = [options.selector, options.eventName], selector = _ref[0], eventName = _ref[1];\n        if (selector === '') {\n          return this.view.el.unbind(this.namespace);\n        } else if (selector === '@') {\n          return this.view.unbind(this.namespace);\n        } else if (selector[0] === '@') {\n          return (_ref2 = this.view[selector.slice(1)]) != null ? _ref2.unbind(this.namespace) : void 0;\n        } else {\n          target = this.view.$(selector, this.view.el[0]);\n          target.off(this.namespace);\n          return target.click();\n        }\n      }\n    });\n    def({\n      applyBindings: function() {\n        var key, options, _ref, _results;\n        _ref = this.events;\n        _results = [];\n        for (key in _ref) {\n          options = _ref[key];\n          _results.push(this.applyBinding(options));\n        }\n        return _results;\n      }\n    });\n    return def({\n      applyBinding: function(options) {\n        var emitter, eventName, handler, selector, _ref, _ref2;\n        _ref = [options.selector, options.eventName, options.handler], selector = _ref[0], eventName = _ref[1], handler = _ref[2];\n        if (selector === '') {\n          return this.view.el.bind(eventName, handler);\n        } else if (selector === '@') {\n          return this.view.bind(eventName, handler, this.view);\n        } else if (selector[0] === '@') {\n          emitter = this.view[selector.slice(1)];\n          if (emitter === void 0) {\n            AS.error(\"Attempted to bind to \" + selector + \", no such member on \" + this);\n          }\n          if (emitter instanceof AS.ViewModel) {\n            return (_ref2 = emitter.model) != null ? _ref2.bind(eventName, handler, this.view) : void 0;\n          } else {\n            return emitter.bind(eventName, handler, this.view);\n          }\n        } else {\n          selector = selector.replace(/\\$/g, \"#\" + this.view.el.attr('id'));\n          return this.view.el.delegate(selector, eventName, handler);\n        }\n      }\n    });\n  });\n\n}).call(this);\n\n})();\n//@ sourceURL=alpha_simprini/client/view_events");minispade.register('alpha_simprini/client/view_model', "(function() {(function() {\n  var AS, Pathology, Taxi, jQuery, _;\n\n  AS = require(\"alpha_simprini\");\n\n  _ = require(\"underscore\");\n\n  jQuery = require(\"jQuery\");\n\n  Pathology = require(\"pathology\");\n\n  Taxi = require(\"taxi\");\n\n  AS.ViewModel = AS.Object.extend(function(_arg) {\n    var def, defs, delegate, include;\n    delegate = _arg.delegate, include = _arg.include, def = _arg.def, defs = _arg.defs;\n    delegate('readPath', 'writePath', {\n      to: 'model'\n    });\n    defs({\n      build: function(view, model) {\n        var constructor;\n        constructor = AS.ViewModel.constructorForModel(model.constructor);\n        return constructor[\"new\"](view, model);\n      }\n    });\n    defs({\n      constructorForModel: function(model) {\n        var klass, method, name, property, _fn, _i, _len, _ref, _ref2,\n          _this = this;\n        if (AS.ViewModel[model.path()]) return AS.ViewModel[model.path()];\n        klass = AS.ViewModel[model.path()] = AS.ViewModel.extend();\n        klass.name = model.name;\n        klass.prototype.type = model._name();\n        klass.bindables = {};\n        klass.extended_by = model.extended_by;\n        _ref = model.properties;\n        for (name in _ref) {\n          property = _ref[name];\n          klass.bindables[name] = (function() {\n            switch (property.constructor) {\n              case AS.Model.Field:\n              case Pathology.Property:\n              case Taxi.Property:\n              case AS.Model.VirtualProperty:\n                return AS.Binding.Field;\n              case AS.Model.BelongsTo:\n              case AS.Model.HasOne:\n                return AS.Binding.One;\n              case AS.Model.HasMany:\n                return AS.Binding.Many;\n            }\n          })();\n        }\n        _ref2 = AS.instanceMethods(model);\n        _fn = function(method) {\n          var _base, _ref3;\n          if (method === 'select') {\n            klass.prototype[method] = function() {\n              return this.model[method].apply(this.model, arguments);\n            };\n          }\n          return (_ref3 = (_base = klass.prototype)[method]) != null ? _ref3 : _base[method] = function() {\n            return this.model[method].apply(this.model, arguments);\n          };\n        };\n        for (_i = 0, _len = _ref2.length; _i < _len; _i++) {\n          method = _ref2[_i];\n          if (_.include(_.keys(Pathology.Object.prototype), method)) continue;\n          _fn(method);\n        }\n        return klass;\n      }\n    });\n    def({\n      initialize: function(view, model) {\n        var config, key, _ref, _results,\n          _this = this;\n        this.view = view;\n        this.model = model;\n        this.cid = this.model.cid;\n        this.id = this.model.id;\n        this.model.bind(\"change:id\", (function() {\n          return _this.id = _this.model.id;\n        }));\n        _ref = this.model.constructor.properties;\n        _results = [];\n        for (key in _ref) {\n          config = _ref[key];\n          _results.push(this[key] = this.model[key]);\n        }\n        return _results;\n      }\n    });\n    def({\n      binding: function(field, options, fn) {\n        var _ref;\n        if (_.isFunction(options)) {\n          _ref = [options, {}], fn = _ref[0], options = _ref[1];\n        }\n        return this.constructor.bindables[field][\"new\"](this.view, this.model, this.model[field], options, fn);\n      }\n    });\n    def({\n      input: function(field, options) {\n        return AS.Binding.Input[\"new\"](this.view, this.model, field, options);\n      }\n    });\n    def({\n      file: function(field, options) {\n        return AS.Binding.File[\"new\"](this.view, this.model, field, options);\n      }\n    });\n    def({\n      checkbox: function(field, options) {\n        return AS.Binding.CheckBox[\"new\"](this.view, this.model, field, options);\n      }\n    });\n    def({\n      select: function(field, options) {\n        return AS.Binding.Select[\"new\"](this.view, this.model, field, options);\n      }\n    });\n    return def({\n      editline: function(field, options) {\n        return AS.Binding.EditLine[\"new\"](this.view, this.model, field, options);\n      }\n    });\n  });\n\n}).call(this);\n\n})();\n//@ sourceURL=alpha_simprini/client/view_model");minispade.register('alpha_simprini/client/views/canvas', "(function() {(function() {\n  var AS,\n    __hasProp = Object.prototype.hasOwnProperty,\n    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };\n\n  AS = require(\"alpha_simprini\");\n\n  AS.Views.Canvas = (function(_super) {\n\n    __extends(Canvas, _super);\n\n    function Canvas() {\n      Canvas.__super__.constructor.apply(this, arguments);\n    }\n\n    return Canvas;\n\n  })(AS.Views.Panel);\n\n}).call(this);\n\n})();\n//@ sourceURL=alpha_simprini/client/views/canvas");minispade.register('alpha_simprini/client/views/dialog', "(function() {(function() {\n  var AS, knead, _;\n\n  AS = require(\"alpha_simprini\");\n\n  _ = require(\"underscore\");\n\n  knead = require(\"knead\");\n\n  AS.Views.Dialog = AS.Views.Panel.extend(function(_arg) {\n    var def, defs, delegate, include;\n    delegate = _arg.delegate, include = _arg.include, def = _arg.def, defs = _arg.defs;\n    def({\n      initialize: function() {\n        var _base;\n        if ((_base = this.constructor.prototype).events == null) _base.events = {};\n        _.extend(this.constructor.prototype.events, {\n          \"click .accept\": \"trigger_commit\",\n          \"click .cancel\": \"trigger_cancel\",\n          \"esc @application\": \"trigger_cancel\",\n          \"accept @application\": \"trigger_commit\",\n          \"knead:dragstart header\": \"dragstart\",\n          \"knead:drag header\": \"drag\",\n          \"knead:dragend header\": \"dragend\"\n        });\n        return this._super.apply(this, arguments);\n      }\n    });\n    def({\n      content: function() {\n        this.head = this.$(this.header(this.header_content));\n        this.content = this.$(this.section(this.main_content));\n        this.foot = this.$(this.footer(this.footer_content));\n        return knead.monitor(this.head);\n      }\n    });\n    def({\n      header_content: function() {}\n    });\n    def({\n      main_content: function() {}\n    });\n    def({\n      footer_content: function() {\n        this.accept = this.$(this.button({\n          \"class\": \"accept\"\n        }, function() {\n          return \"Accept\";\n        }));\n        return this.cancel = this.$(this.a({\n          href: \"#\",\n          \"class\": \"cancel\"\n        }, function() {\n          return \"cancel\";\n        }));\n      }\n    });\n    def({\n      open: function() {\n        this.el.css({\n          width: \"\",\n          height: \"\"\n        });\n        return this.trigger(\"open\");\n      }\n    });\n    def({\n      close: function() {\n        this.el.css({\n          width: 0,\n          height: 0,\n          overflow: \"hidden\"\n        });\n        return this.trigger(\"close\");\n      }\n    });\n    def({\n      trigger_commit: function() {\n        this.trigger(\"commit\");\n        return this.close();\n      }\n    });\n    def({\n      trigger_cancel: function() {\n        this.trigger(\"cancel\");\n        return this.close();\n      }\n    });\n    def({\n      dragstart: function(event) {\n        return this.start = this.el.position();\n      }\n    });\n    def({\n      drag: function(event) {\n        return this.el.css({\n          top: event.deltaY + this.start.top,\n          left: event.deltaX + this.start.left\n        });\n      }\n    });\n    return def({\n      dragend: function(event) {\n        return delete this.start;\n      }\n    });\n  });\n\n}).call(this);\n\n})();\n//@ sourceURL=alpha_simprini/client/views/dialog");minispade.register('alpha_simprini/client/views/horizontal_split', "(function() {(function() {\n  var __hasProp = Object.prototype.hasOwnProperty,\n    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };\n\n  module(\"AS.Views\", function() {\n    return this.HorizontalSplit = (function(_super) {\n\n      __extends(HorizontalSplit, _super);\n\n      function HorizontalSplit() {\n        HorizontalSplit.__super__.constructor.apply(this, arguments);\n      }\n\n      HorizontalSplit.prototype.content = function(args) {\n        if (this.left == null) this.left = new AS.Views.Panel;\n        if (this.bar == null) this.bar = new AS.Views.Splitter;\n        if (this.right == null) this.right = new AS.Views.Panel;\n        return this.el.append(this.left.el, this.bar.el, this.right.el);\n      };\n\n      return HorizontalSplit;\n\n    })(AS.View);\n  });\n\n}).call(this);\n\n})();\n//@ sourceURL=alpha_simprini/client/views/horizontal_split");minispade.register('alpha_simprini/client/views/panel', "(function() {(function() {\n  var AS;\n\n  AS = require(\"alpha_simprini\");\n\n  AS.Views.Panel = AS.View.extend();\n\n}).call(this);\n\n})();\n//@ sourceURL=alpha_simprini/client/views/panel");minispade.register('alpha_simprini/client/views/region', "(function() {(function() {\n  var AS, sum, _;\n\n  AS = require(\"alpha_simprini\");\n\n  _ = require(\"underscore\");\n\n  sum = function(array) {\n    return _.reduce(array, (function(memo, num) {\n      return memo + num;\n    }), 0);\n  };\n\n  AS.Views.Region = AS.View.extend(function(_arg) {\n    var def;\n    def = _arg.def;\n    def({\n      initialize: function() {\n        var _ref,\n          _this = this;\n        this._super.apply(this, arguments);\n        return (_ref = this.application) != null ? _ref.bind(\"resize\", function() {\n          return _this.layout();\n        }) : void 0;\n      }\n    });\n    return def({\n      layout: function() {}\n    });\n  });\n\n  AS.Views.North = AS.Views.Region.extend(function(_arg) {\n    var def;\n    def = _arg.def;\n  });\n\n  AS.Views.East = AS.Views.Region.extend(function(_arg) {\n    var def;\n    def = _arg.def;\n    return def({\n      layout: function() {\n        return this.el.css({\n          top: this.el.siblings(\".North\").outerHeight() || 0,\n          bottom: this.el.siblings(\".South\").outerHeight() || 0\n        });\n      }\n    });\n  });\n\n  AS.Views.South = AS.Views.Region.extend(function(_arg) {\n    var def;\n    def = _arg.def;\n  });\n\n  AS.Views.West = AS.Views.Region.extend(function(_arg) {\n    var def;\n    def = _arg.def;\n    return def({\n      layout: function() {\n        return this.el.css({\n          top: this.el.siblings(\".North\").outerHeight() || 0,\n          bottom: this.el.siblings(\".South\").outerHeight() || 0\n        });\n      }\n    });\n  });\n\n  AS.Views.Center = AS.Views.Region.extend(function(_arg) {\n    var def;\n    def = _arg.def;\n    return def({\n      layout: function() {\n        return this.el.css({\n          top: this.el.siblings(\".North\").outerHeight() || 0,\n          bottom: this.el.siblings(\".South\").outerHeight() || 0,\n          left: this.el.siblings(\".West\").outerWidth() || 0,\n          right: this.el.siblings(\".East\").outerWidth() || 0\n        });\n      }\n    });\n  });\n\n}).call(this);\n\n})();\n//@ sourceURL=alpha_simprini/client/views/region");minispade.register('alpha_simprini/client/views/splitter', "(function() {(function() {\n  var __hasProp = Object.prototype.hasOwnProperty,\n    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };\n\n  module(\"AS.Views\", function() {\n    return this.Splitter = (function(_super) {\n\n      __extends(Splitter, _super);\n\n      function Splitter() {\n        Splitter.__super__.constructor.apply(this, arguments);\n      }\n\n      return Splitter;\n\n    })(AS.View);\n  });\n\n}).call(this);\n\n})();\n//@ sourceURL=alpha_simprini/client/views/splitter");minispade.register('alpha_simprini/client/views/stage', "(function() {(function() {\n  var AS;\n\n  AS = require(\"alpha_simprini\");\n\n  AS.Views.Stage = AS.Views.Panel.extend(function(_arg) {\n    var def, defs, delegate, include;\n    delegate = _arg.delegate, include = _arg.include, def = _arg.def, defs = _arg.defs;\n    def({\n      canvas_class: AS.Views.Canvas\n    });\n    return def({\n      initialize: function(config) {\n        this._super.apply(this, arguments);\n        if (this.canvas == null) this.canvas = AS.Views.Canvas[\"new\"]();\n        return this.el.append(this.canvas.el);\n      }\n    });\n  });\n\n}).call(this);\n\n})();\n//@ sourceURL=alpha_simprini/client/views/stage");minispade.register('alpha_simprini/client/views/vertical_split', "(function() {(function() {\n  var __hasProp = Object.prototype.hasOwnProperty,\n    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };\n\n  module(\"AS.Views\", function() {\n    return this.VerticalSplit = (function(_super) {\n\n      __extends(VerticalSplit, _super);\n\n      function VerticalSplit() {\n        VerticalSplit.__super__.constructor.apply(this, arguments);\n      }\n\n      VerticalSplit.prototype.initialize = function() {\n        if (this.top == null) this.top = new AS.Views.Panel;\n        if (this.bar == null) this.bar = new AS.Views.Splitter;\n        if (this.bottom == null) this.bottom = new AS.Views.Panel;\n        return this.el.append(this.top.el, this.bar.el, this.bottom.el);\n      };\n\n      return VerticalSplit;\n\n    })(AS.View);\n  });\n\n}).call(this);\n\n})();\n//@ sourceURL=alpha_simprini/client/views/vertical_split");minispade.register('alpha_simprini/client/views/viewport', "(function() {(function() {\n\n\n\n}).call(this);\n\n})();\n//@ sourceURL=alpha_simprini/client/views/viewport");minispade.register('alpha_simprini/core', "(function() {(function() {\n  var AS, Core, _;\n\n  AS = require(\"alpha_simprini\");\n\n  Core = AS.part(\"Core\");\n\n  _ = require(\"underscore\");\n\n  Core.require(\"logging\\n\\ncallbacks state_machine\\ninstance_methods\\n\\nmodel model/dendrite model/synapse model/store\\nproperties/field properties/has_many properties/has_one\\nproperties/belongs_to properties/virtual_property\\n\\ncollection filtered_collection\\n\\nmodels/radio_selection_model models/multiple_selection_model\\nmodels/group models/grouping models/file\");\n\n  AS.ConstructorIdentity = function(constructor) {\n    return function(object) {\n      return object.constructor === constructor;\n    };\n  };\n\n  AS.Identity = function(object) {\n    return function(other) {\n      return object === other;\n    };\n  };\n\n  AS.IdentitySort = function(object) {\n    return object;\n  };\n\n  AS.loadPath = function(path) {\n    var segment, target, _i, _len, _ref;\n    target = require(\"pathology\").Namespaces;\n    _ref = path.split(\".\");\n    for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n      segment = _ref[_i];\n      target = target[segment];\n    }\n    return target;\n  };\n\n  AS.deepClone = function(it) {\n    var clone, key, value;\n    if (_.isFunction(it)) {\n      clone = it;\n    } else if (_.isArray(it)) {\n      clone = _.clone(it);\n    } else if (_.isObject(it)) {\n      clone = {};\n      for (key in it) {\n        value = it[key];\n        if (_.isArray(value) || _.isObject(value)) {\n          clone[key] = AS.deepClone(value);\n        } else {\n          clone[key] = value;\n        }\n      }\n    } else {\n      clone = it;\n    }\n    return clone;\n  };\n\n  AS.uniq = function() {\n    return (Math.floor(Math.random() * 100000000000000000)).toString(32) + \"-\" + (Math.floor(Math.random() * 100000000000000000)).toString(32) + \"-\" + (new Date).getTime().toString(32);\n  };\n\n  AS.humanSize = function(size) {\n    var i, units;\n    units = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n    i = 0;\n    while (size >= 1024) {\n      size /= 1024;\n      ++i;\n    }\n    if (size) {\n      return size.toFixed(1) + ' ' + units[i];\n    } else {\n      return \"???\";\n    }\n  };\n\n}).call(this);\n\n})();\n//@ sourceURL=alpha_simprini/core");minispade.register('alpha_simprini/core/callbacks', "(function() {(function() {\n  var AS, upperCamelize;\n\n  AS = require(\"alpha_simprini\");\n\n  upperCamelize = require(\"fleck\").upperCamelize;\n\n  AS.Callbacks = AS.Module.extend(function(_arg) {\n    var def, defs;\n    def = _arg.def, defs = _arg.defs;\n    defs({\n      defineCallbacks: function(all) {\n        var callbacks, key, _results,\n          _this = this;\n        _results = [];\n        for (key in all) {\n          callbacks = all[key];\n          _results.push((function(key, callbacks) {\n            var callback, _i, _len, _ref, _results2;\n            _ref = callbacks || [];\n            _results2 = [];\n            for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n              callback = _ref[_i];\n              _results2.push((function(callback) {\n                return _this[\"\" + key + (upperCamelize(callback))] = function(fn) {\n                  return this.pushInheritableItem(\"\" + key + (upperCamelize(callback)) + \"_callbacks\", fn);\n                };\n              })(callback));\n            }\n            return _results2;\n          })(key, callbacks));\n        }\n        return _results;\n      }\n    });\n    def({\n      runCallbacks: function(name) {\n        var callback, _i, _len, _ref, _results;\n        _ref = this.constructor[\"\" + name + \"_callbacks\"] || [];\n        _results = [];\n        for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n          callback = _ref[_i];\n          _results.push(callback.call(null, this));\n        }\n        return _results;\n      }\n    });\n    return this.prototype.runCallbacks.doc = {\n      params: [[\"name\", String, true]],\n      desc: \"\\n #   \"\n    };\n  });\n\n}).call(this);\n\n})();\n//@ sourceURL=alpha_simprini/core/callbacks");minispade.register('alpha_simprini/core/collection', "(function() {(function() {\n  var AS, Taxi, extend, isString, _;\n\n  AS = require(\"alpha_simprini\");\n\n  Taxi = require(\"taxi\");\n\n  _ = require(\"underscore\");\n\n  extend = _.extend, isString = _.isString;\n\n  AS.Collection = AS.Object.extend(function(_arg) {\n    var def, delegate, include;\n    def = _arg.def, include = _arg.include, delegate = _arg.delegate;\n    include(Taxi.Mixin);\n    delegate(AS.COLLECTION_DELEGATES, {\n      to: \"models\"\n    });\n    def({\n      initialize: function(models, options) {\n        var model, _i, _len, _ref, _results;\n        this.models = models != null ? models : [];\n        if (options == null) options = {};\n        extend(this, options);\n        this.length = 0;\n        this.byId = {};\n        this.byCid = {};\n        this.models = _([]).chain();\n        _ref = this.models;\n        _results = [];\n        for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n          model = _ref[_i];\n          _results.push(this.add(model));\n        }\n        return _results;\n      }\n    });\n    this.prototype.initialize.doc = {\n      params: [\n        [\n          \"@models\", [AS.Model], false, {\n            \"default\": []\n          }\n        ], [\n          \"options\", Object, false, {\n            \"default\": {}\n          }\n        ]\n      ],\n      desc: \"\"\n    };\n    def({\n      model: function() {\n        return AS.Model;\n      }\n    });\n    this.prototype.model.doc = {\n      desc: \"\"\n    };\n    def({\n      add: function(model, options) {\n        if (model == null) model = {};\n        if (options == null) options = {};\n        if (model.model && model.model.id) model = model.model;\n        if (!(model instanceof AS.Model)) model = this.build(model);\n        if (this.inverse && this.source) model[this.inverse].set(this.source);\n        if (this.models.include(model).value()) {\n          throw new Error(\"Cannot add model to collection twice.\");\n        }\n        this._add(model, options);\n        return model;\n      }\n    });\n    this.prototype.add.doc = {\n      params: [\n        [\n          \"model\", [AS.Model, String, Object], false, {\n            \"default\": {}\n          }\n        ], [\n          \"options\", Object, false, {\n            \"default\": {}\n          }\n        ]\n      ],\n      desc: \"\"\n    };\n    def({\n      build: function(model) {\n        var constructor, ctor, data;\n        if (isString(model) && (constructor = typeof this.model === \"function\" ? this.model() : void 0)) {\n          return constructor.find(model);\n        } else if (isString(model)) {\n          return AS.All.byId[model];\n        } else {\n          if (model.id && AS.All.byId[model.id]) {\n            return AS.All.byId[model.id];\n          } else {\n            ctor = this.model();\n          }\n          data = _.clone(model);\n          return ctor[\"new\"](data);\n        }\n      }\n    });\n    this.prototype.build.doc = {\n      private: true,\n      params: [[\"model\", [AS.Model, String, Object], true]],\n      desc: \"\"\n    };\n    def({\n      _add: function(model, options) {\n        var index;\n        if (options == null) options = {};\n        if (options.at == null) options.at = this.length;\n        index = options.at;\n        this.byCid[model.cid] = this.byId[model.id] = model;\n        this.models._wrapped.splice(index, 0, model);\n        this.length++;\n        model.bind({\n          event: \"all\",\n          namespace: this.objectId(),\n          handler: this._onModelEvent,\n          context: this\n        });\n        return model.trigger(\"add\", this, options);\n      }\n    });\n    this.prototype._add.doc = {\n      private: true,\n      params: [\n        [\"model\", AS.Model, true], [\n          \"options\", Object, false, {\n            \"default\": {}\n          }\n        ]\n      ],\n      desc: \"\"\n    };\n    def({\n      at: function(index) {\n        return this.models.value()[index];\n      }\n    });\n    this.prototype.at.doc = {\n      params: [[\"index\", Number, true]],\n      desc: \"\"\n    };\n    def({\n      remove: function(model, options) {\n        var result;\n        if (options == null) options = {};\n        model = model.model;\n        result = this._remove(model, options);\n        if (this.inverse) model[this.inverse].set(null);\n        return result;\n      }\n    });\n    this.prototype.remove.doc = {\n      params: [\n        [\"model\", AS.Model, true], [\n          \"options\", Object, false, {\n            \"default\": {}\n          }\n        ]\n      ],\n      desc: \"\"\n    };\n    def({\n      _remove: function(model, options) {\n        if (options == null) options = {};\n        options.at = this.models.indexOf(model).value();\n        this.length--;\n        delete this.byId[model.id];\n        delete this.byCid[model.cid];\n        this.models = this.models.without(model);\n        model.trigger(\"remove\", this, options);\n        return model.unbind({\n          event: \"all\",\n          namespace: this.objectId()\n        });\n      }\n    });\n    this.prototype._remove.doc = {\n      private: true,\n      params: [\n        [\"model\", AS.Model, true], [\n          \"options\", {}, false, {\n            \"default\": {}\n          }\n        ]\n      ],\n      desc: \"\"\n    };\n    def({\n      filter: function(filterBy) {\n        return AS.FilteredCollection[\"new\"](this, filterBy);\n      }\n    });\n    this.prototype.filter.doc = {\n      params: [[\"filterBy\", {}, true]],\n      \"return\": AS.FilteredCollection,\n      desc: \"\"\n    };\n    def({\n      groupBy: function(key, metaData) {\n        return AS.Models.Grouping[\"new\"](this, key, metaData);\n      }\n    });\n    this.prototype.groupBy.doc = {\n      params: [[\"key\", String, true], [\"metaData\", Object, false]],\n      desc: \"\"\n    };\n    def({\n      _onModelEvent: function(event, model, collection, options) {\n        if (!isString(event)) return;\n        if ((event === \"add\" || event === \"remove\") && (this !== collection)) {\n          return;\n        }\n        if (event === \"destroy\") this._remove(model, options);\n        return this.trigger.apply(this, arguments);\n      }\n    });\n    return this.prototype._onModelEvent.doc = {\n      private: true,\n      params: [[\"event\", String, true], [\"model\", AS.Model, true], [\"collection\", AS.Collection, false], [\"options\", Object, false]],\n      desc: \"\"\n    };\n  });\n\n}).call(this);\n\n})();\n//@ sourceURL=alpha_simprini/core/collection");minispade.register('alpha_simprini/core/filtered_collection', "(function() {(function() {\n  var AS, Taxi, extend, isArray, isFunction, isString, _ref,\n    __indexOf = Array.prototype.indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };\n\n  AS = require(\"alpha_simprini\");\n\n  Taxi = require(\"taxi\");\n\n  _ref = require(\"underscore\"), extend = _ref.extend, isString = _ref.isString, isFunction = _ref.isFunction, isArray = _ref.isArray;\n\n  AS.FilteredCollection = AS.Collection.extend(function(_arg) {\n    var def, defs, delegate, include;\n    delegate = _arg.delegate, include = _arg.include, def = _arg.def, defs = _arg.defs;\n    delegate('add', 'remove', {\n      to: 'parent'\n    });\n    def({\n      initialize: function(parent, conditions) {\n        var key, value;\n        this.parent = parent;\n        if (conditions == null) conditions = {};\n        this._super();\n        this.conditions = Taxi.Map[\"new\"]();\n        for (key in conditions) {\n          value = conditions[key];\n          this.conditions.set(key, value);\n        }\n        this.conditions.bind({\n          event: 'change',\n          handler: this.reFilter,\n          context: this\n        });\n        this.parent.bind({\n          event: 'add',\n          handler: this.determinePlacementInSelf,\n          context: this,\n          namespace: this.objectId()\n        });\n        this.parent.bind({\n          event: 'change',\n          handler: this.determinePlacementInSelf,\n          context: this,\n          namespace: this.objectId()\n        });\n        this.parent.bind({\n          event: 'remove',\n          handler: this.removeFromSelf,\n          context: this,\n          namespace: this.objectId()\n        });\n        return this.reFilter();\n      }\n    });\n    this.prototype.initialize.doc = {\n      params: [\n        [\"@parent\", AS.Collection, true], [\n          \"conditions\", Object, false, {\n            \"default\": {}\n          }\n        ]\n      ],\n      desc: \"\"\n    };\n    def({\n      determinePlacementInSelf: function(model) {\n        if (this.filter(model) === true) {\n          return this.addToSelf(model);\n        } else {\n          return this.removeFromSelf(model);\n        }\n      }\n    });\n    this.prototype.determinePlacementInSelf.doc = {\n      params: [[\"model\", AS.Model, true]],\n      desc: \"\"\n    };\n    def({\n      addToSelf: function(model) {\n        if (this.models.include(model).value()) return;\n        return this._add(model);\n      }\n    });\n    this.prototype.addToSelf.doc = {\n      params: [[model, AS.Model, true]],\n      desc: \"\"\n    };\n    def({\n      removeFromSelf: function(model) {\n        if (!this.models.include(model).value()) return;\n        return this._remove(model);\n      }\n    });\n    this.prototype.removeFromSelf.doc = {\n      params: [[model, AS.Modle, true]],\n      desc: \"\"\n    };\n    def({\n      reFilter: function() {\n        var _this = this;\n        return this.parent.each(function(model) {\n          return _this.determinePlacementInSelf(model);\n        });\n      }\n    });\n    this.prototype.reFilter.doc = {\n      desc: \"\"\n    };\n    def({\n      setConditions: function(conditions) {\n        var key, value;\n        this.conditions.unbind();\n        for (key in conditions) {\n          value = conditions[key];\n          this.conditions.set(key, value);\n        }\n        this.conditions.bind({\n          event: 'change',\n          handler: this.reFilter,\n          context: this\n        });\n        return this.reFilter();\n      }\n    });\n    this.prototype.setConditions.doc = {\n      params: [[\"conditions\", Object, true]],\n      desc: \"\"\n    };\n    def({\n      filter: function(model) {\n        var key, modelValue, testValue, value, _ref2;\n        _ref2 = this.conditions.toObject();\n        for (key in _ref2) {\n          value = _ref2[key];\n          modelValue = model[key].get();\n          testValue = isFunction(value) ? value.call() : value;\n          testValue = isArray(testValue) ? testValue : [testValue];\n          if (__indexOf.call(testValue, modelValue) < 0) return false;\n        }\n        return true;\n      }\n    });\n    return this.prototype.filter.doc = {\n      params: [[\"model\", AS.Model, true]],\n      desc: \"\"\n    };\n  });\n\n}).call(this);\n\n})();\n//@ sourceURL=alpha_simprini/core/filtered_collection");minispade.register('alpha_simprini/core/instance_methods', "(function() {(function() {\n  var AS, SKIP_METHODS, _;\n\n  AS = require(\"alpha_simprini\");\n\n  _ = require(\"underscore\");\n\n  SKIP_METHODS = ['objectId', 'readPath', 'path', '_name', '_readId', '_container', '_path', '_createProperties', 'propertiesThatCouldBe', 'toString', 'constructor'];\n\n  AS.instanceMethods = function(klass) {\n    var methods;\n    methods = _(klass.prototype).chain().keys();\n    if (klass.__super__) {\n      methods = methods.concat(AS.instanceMethods(klass.__super__.constructor));\n    }\n    return methods.without(SKIP_METHODS).value();\n  };\n\n}).call(this);\n\n})();\n//@ sourceURL=alpha_simprini/core/instance_methods");minispade.register('alpha_simprini/core/logging', "(function() {(function() {\n  var AS;\n\n  AS = require(\"alpha_simprini\");\n\n  AS.warn = function() {\n    return console.warn.apply(console, arguments);\n  };\n\n  AS.error = function() {\n    console.trace();\n    return console.error.apply(console, arguments);\n  };\n\n  AS.suppress_logging = function() {\n    AS.error = function() {};\n    return AS.warn = function() {};\n  };\n\n}).call(this);\n\n})();\n//@ sourceURL=alpha_simprini/core/logging");minispade.register('alpha_simprini/core/model', "(function() {(function() {\n  var AS, Taxi, keys, toArray, uniqueId, _, _ref;\n\n  AS = require(\"alpha_simprini\");\n\n  _ref = _ = require(\"underscore\"), uniqueId = _ref.uniqueId, toArray = _ref.toArray, keys = _ref.keys;\n\n  Taxi = require(\"taxi\");\n\n  AS.All = {\n    byCid: {},\n    byId: {},\n    byIdRef: {}\n  };\n\n  AS.Model = AS.Object.extend(function(_arg) {\n    var def, defs, delegate, include;\n    delegate = _arg.delegate, include = _arg.include, def = _arg.def, defs = _arg.defs;\n    include(Taxi.Mixin);\n    include(AS.Callbacks);\n    this.defineCallbacks({\n      after: ['initialize']\n    });\n    defs({\n      find: function(id) {\n        return AS.All.byId[id] || this[\"new\"]({\n          id: id\n        });\n      }\n    });\n    this.find.doc = {\n      params: [[\"id\", String, true]],\n      \"return\": AS.Model,\n      desc: \"If a model exsist by the `id` it is retrieved from an identity map.\\nOtherwise a model is created with `id`.\"\n    };\n    def({\n      initialize: function(attributes) {\n        var id;\n        if (attributes == null) attributes = {};\n        if (attributes.id == null) attributes.id = AS.uniq();\n        this.model = this;\n        if (id = attributes.id) {\n          delete attributes.id;\n          this.setId(id);\n        }\n        this.set(attributes);\n        return this.runCallbacks('afterInitialize');\n      }\n    });\n    this.prototype.initialize.doc = {\n      params: [\n        [\n          \"attributes\", Object, false, {\n            \"default\": {}\n          }\n        ]\n      ],\n      desc: \"\"\n    };\n    def({\n      properties: function() {\n        var name, _i, _len, _ref2, _results;\n        _ref2 = keys(this.constructor.properties);\n        _results = [];\n        for (_i = 0, _len = _ref2.length; _i < _len; _i++) {\n          name = _ref2[_i];\n          _results.push(this[name]);\n        }\n        return _results;\n      }\n    });\n    this.prototype.properties.doc = {\n      desc: \"\"\n    };\n    def({\n      set: function(attributes) {\n        var key, property, value, _ref2, _results;\n        _results = [];\n        for (key in attributes) {\n          value = attributes[key];\n          if (key === \"_type\") continue;\n          if (key === \"id\") {\n            _results.push(this.setId(value));\n          } else {\n            property = this[key];\n            _results.push((_ref2 = this[key]) != null ? _ref2.set(value) : void 0);\n          }\n        }\n        return _results;\n      }\n    });\n    this.prototype.set.doc = {\n      params: [[\"attributes\", Object, true]],\n      desc: \"\"\n    };\n    def({\n      setId: function(id) {\n        if (this.id) {\n          delete AS.All.byId[this.id];\n          delete AS.All.byIdRef[\"\" + this.id + \"-\" + (this.constructor.path())];\n        }\n        this.id = id;\n        this.idRef = \"\" + this.id + \"-\" + (this.constructor.path());\n        if (this.cid == null) this.cid = this.idRef || uniqueId(\"c\");\n        AS.All.byCid[this.cid] = AS.All.byId[this.id] = AS.All.byIdRef[this.idRef] = this;\n        return this.trigger(\"change:id\");\n      }\n    });\n    this.prototype.setId.doc = {\n      params: [[\"id\", String, true]],\n      desc: \"\"\n    };\n    def({\n      destroy: function() {\n        return this.trigger(\"destroy\");\n      }\n    });\n    this.prototype.destroy.doc = {\n      desc: \"\"\n    };\n    def({\n      trigger: function() {\n        var args;\n        args = toArray(arguments);\n        args.splice(1, 0, this);\n        return this._super.apply(this, args);\n      }\n    });\n    return this.prototype.trigger.doc = {\n      params: [[\"event\", String, true], [\"...\"]],\n      desc: \"\"\n    };\n  });\n\n}).call(this);\n\n})();\n//@ sourceURL=alpha_simprini/core/model");minispade.register('alpha_simprini/core/model/dendrite', "(function() {(function() {\n  var AS, _;\n\n  AS = require(\"alpha_simprini\");\n\n  _ = require(\"underscore\");\n\n  AS.Model.Dendrite = AS.Object.extend(function(_arg) {\n    var def, defs, delegate, include;\n    delegate = _arg.delegate, include = _arg.include, def = _arg.def, defs = _arg.defs;\n    def({\n      initialize: function(observer, notifier, config) {\n        this.observer = observer;\n        this.notifier = notifier;\n        this.config = config != null ? config : {};\n        this.callback = _.bind(this.callback, this);\n        return this.on();\n      }\n    });\n    def({\n      callback: function() {\n        if (this.observer.blocking) return;\n        return this.observer.set(this.notifier.get(), arguments);\n      }\n    });\n    def({\n      equal: function() {\n        return this.notifier.get() === this.observer.get();\n      }\n    });\n    def({\n      on: function() {\n        this.notifier.binds(this.callback);\n        if (this.equal()) return;\n        if (!_.isEmpty(this.notifier.get())) return this.callback();\n      }\n    });\n    return def({\n      off: function() {\n        return this.notifier.unbinds(this.callback);\n      }\n    });\n  });\n\n  AS.Model.CollectionDendrite = AS.Model.Dendrite.extend(function(_arg) {\n    var def, defs, delegate, include;\n    delegate = _arg.delegate, include = _arg.include, def = _arg.def, defs = _arg.defs;\n    def({\n      initialize: function(observer, notifier, config) {\n        this.observer = observer;\n        this.notifier = notifier;\n        this.config = config != null ? config : {};\n        this.insertCallback = _.bind(this.insertCallback, this);\n        this.removeCallback = _.bind(this.removeCallback, this);\n        return this.on();\n      }\n    });\n    def({\n      insertCallback: function(item, options) {\n        if (this.observer.blocking) return;\n        return this.observer.insert(item, options);\n      }\n    });\n    def({\n      removeCallback: function(item, options) {\n        if (this.observer.blocking) return;\n        return this.observer.remove(item, options);\n      }\n    });\n    def({\n      on: function() {\n        var _this = this;\n        this.notifier.binds(this.insertCallback, this.removeCallback);\n        if (this.config.syncNow) {\n          return this.notifier.each(function(item, index) {\n            return _this.insertCallback(item, index);\n          });\n        }\n      }\n    });\n    return def({\n      off: function() {\n        return this.notifier.unbinds(this.insertCallback, this.removeCallback);\n      }\n    });\n  });\n\n}).call(this);\n\n})();\n//@ sourceURL=alpha_simprini/core/model/dendrite");minispade.register('alpha_simprini/core/model/rest', "(function() {(function() {\n  var $, AS, camelize, convertKeys, extractIds, pluralize, singularize, underscore, _, _ref;\n\n  AS = require(\"alpha_simprini\");\n\n  _ref = require(\"fleck\"), camelize = _ref.camelize, underscore = _ref.underscore, pluralize = _ref.pluralize, singularize = _ref.singularize;\n\n  _ = require(\"underscore\");\n\n  $ = require(\"jquery\");\n\n  convertKeys = function(object) {\n    var converted, key, value;\n    converted = {};\n    for (key in object) {\n      value = object[key];\n      converted[camelize(key)] = value;\n    }\n    return converted;\n  };\n\n  extractIds = function(object) {\n    var data, ids, key, value;\n    data = {};\n    ids = {};\n    for (key in object) {\n      value = object[key];\n      if (key.match(/Id$/) && !object[key.replace(/Id$/, \"Type\")]) {\n        ids[key] = value;\n      } else if (key.match(/Ids$/)) {\n        ids[key] = value;\n      } else {\n        data[key] = value;\n      }\n    }\n    return [data, ids];\n  };\n\n  AS.Model.REST = AS.Module.extend(function(_arg) {\n    var def, defs, delegate, include;\n    delegate = _arg.delegate, include = _arg.include, def = _arg.def, defs = _arg.defs;\n    defs({\n      mappings: AS.Map[\"new\"]()\n    });\n    defs({\n      rootKey: function() {\n        return underscore(this._name());\n      }\n    });\n    defs({\n      resourcesURL: function() {\n        return \"/\" + (pluralize(this.rootKey()));\n      }\n    });\n    defs({\n      resourceURL: function(id) {\n        return \"\" + (this.resourcesURL()) + \"/\" + id;\n      }\n    });\n    defs({\n      load: function(id, callback) {\n        var model;\n        if (!(model = AS.All.byId[id])) {\n          model = this[\"new\"]();\n          if (callback == null) callback = model.didLoad;\n          this.readOne(id, _.bind(callback, model));\n        }\n        return model;\n      }\n    });\n    def({\n      didLoad: function(data) {\n        return this.loadData(data);\n      }\n    });\n    defs({\n      readOne: function(id, callback) {\n        var _this = this;\n        return $.ajax({\n          url: this.resourceURL(id),\n          dataType: 'json',\n          success: callback,\n          error: function() {\n            console.error(\"readone error\");\n            return console.error(_this, arguments);\n          }\n        });\n      }\n    });\n    defs({\n      mappings: function() {\n        var klass, mappings, _i, _len, _ref2;\n        mappings = {};\n        _ref2 = this.appendedTo;\n        for (_i = 0, _len = _ref2.length; _i < _len; _i++) {\n          klass = _ref2[_i];\n          mappings[pluralize(camelize(klass.rootKey()))] = klass;\n        }\n        return mappings;\n      }\n    });\n    def({\n      loadData: function(data) {\n        var embed, embeds, ids, key, modelData, references, root, _i, _len, _ref2, _ref3;\n        references = AS.Map[\"new\"]();\n        root = this.constructor.rootKey();\n        modelData = data[root];\n        modelData = convertKeys(modelData);\n        _ref2 = extractIds(modelData), modelData = _ref2[0], ids = _ref2[1];\n        this.set(modelData);\n        references.set(this, ids);\n        _ref3 = convertKeys(data);\n        for (key in _ref3) {\n          embeds = _ref3[key];\n          if (key === root) continue;\n          for (_i = 0, _len = embeds.length; _i < _len; _i++) {\n            embed = embeds[_i];\n            this.constructor.mappings()[key].sideloadData(embed, references);\n          }\n        }\n        references.each(function(model, ids) {\n          return model.resolveReferences(ids);\n        });\n        this.trigger(\"ready\");\n        return this;\n      }\n    });\n    defs({\n      sideloadData: function(modelData, references) {\n        var ids, model, _ref2;\n        modelData = convertKeys(modelData);\n        _ref2 = extractIds(modelData), modelData = _ref2[0], ids = _ref2[1];\n        model = this[\"new\"](modelData);\n        return references.set(model, ids);\n      }\n    });\n    return def({\n      resolveReferences: function(ids) {\n        var id, item, key, path, references, relation, relationKey, _results;\n        _results = [];\n        for (key in ids) {\n          references = ids[key];\n          if (!references) continue;\n          if (references.length === void 0) {\n            relationKey = key.replace(/Id$/, '');\n            path = this[relationKey].model().path();\n            id = references;\n            _results.push(this[relationKey].set(AS.All.byIdRef[\"\" + id + \"-\" + path]));\n          } else {\n            relationKey = pluralize(key.replace(/Ids$/, ''));\n            path = this[relationKey].model().path();\n            _results.push((function() {\n              var _i, _len, _results2;\n              _results2 = [];\n              for (_i = 0, _len = references.length; _i < _len; _i++) {\n                id = references[_i];\n                item = AS.All.byIdRef[\"\" + id + \"-\" + path];\n                relation = this[relationKey];\n                if (relation.include(item).value()) continue;\n                _results2.push(relation.add(item));\n              }\n              return _results2;\n            }).call(this));\n          }\n        }\n        return _results;\n      }\n    });\n  });\n\n}).call(this);\n\n})();\n//@ sourceURL=alpha_simprini/core/model/rest");minispade.register('alpha_simprini/core/model/share', "(function() {(function() {\n  var AS, ShareJS, keys, _;\n\n  AS = require(\"alpha_simprini\");\n\n  _ = require(\"underscore\");\n\n  keys = _.keys;\n\n  ShareJS = require(\"share\").client;\n\n  AS.ShareJSURL = \"http://\" + ((typeof window !== \"undefined\" && window !== null ? window.location.host : void 0) || 'localhost') + \"/sjs\";\n\n  AS.Model.ShareJSAdapter = AS.Object.extend(function(_arg) {\n    var INDEX, def, defs, delegate, include;\n    delegate = _arg.delegate, include = _arg.include, def = _arg.def, defs = _arg.defs;\n    INDEX = \"index\";\n    def({\n      initialize: function(_arg2) {\n        var _ref;\n        this.store = _arg2.store, this.url = _arg2.url, this.model = _arg2.model, this.share = _arg2.share;\n        this.model.adapter = this;\n        return (_ref = this.url) != null ? _ref : this.url = AS.ShareJSURL;\n      }\n    });\n    def({\n      open: function() {\n        var _this = this;\n        return ShareJS.open(this.model.id, \"json\", this.url, function(error, share) {\n          if (error) {\n            return _this.store.trigger(\"share:open:error\", error, _this);\n          } else {\n            if (share.get() === null) share.set(new Object);\n            return _this.didOpen(share);\n          }\n        });\n      }\n    });\n    def({\n      sync: function(data) {\n        var property, _i, _len, _ref, _results;\n        if (data == null) data = {};\n        _ref = this.model.properties();\n        _results = [];\n        for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n          property = _ref[_i];\n          _results.push(typeof property.syncWith === \"function\" ? property.syncWith(this.model.share, data[property.options.name]) : void 0);\n        }\n        return _results;\n      }\n    });\n    def({\n      didOpen: function(share) {\n        var constructorGroup, modelDocument, path;\n        this.share = share;\n        path = this.model.constructor.path();\n        constructorGroup = this.constructorGroup(path);\n        modelDocument = this.modelDocument(constructorGroup);\n        this.loadEmbeddedData();\n        return this.model.trigger(\"ready\");\n      }\n    });\n    def({\n      didLoad: function(share) {\n        var constructorGroup, modelDocument, path;\n        this.share = share;\n        path = this.model.constructor.path();\n        constructorGroup = this.constructorGroup(path);\n        modelDocument = this.modelDocument(constructorGroup);\n        this.model.share = modelDocument;\n        this.sync();\n        return this.model.trigger(\"ready\");\n      }\n    });\n    def({\n      modelDocument: function(constructorGroup) {\n        var modelDocument;\n        modelDocument = constructorGroup.at(this.model.id);\n        if (!modelDocument.get()) modelDocument.set(new Object);\n        return modelDocument;\n      }\n    });\n    def({\n      constructorGroup: function(path) {\n        var constructorGroup;\n        constructorGroup = this.share.at(path);\n        if (!constructorGroup.get()) constructorGroup.set(new Object);\n        return constructorGroup;\n      }\n    });\n    def({\n      eachEmbed: function(fn) {\n        var key, value, _ref, _results;\n        _ref = this.share.get();\n        _results = [];\n        for (key in _ref) {\n          value = _ref[key];\n          if (key === INDEX) continue;\n          _results.push(fn.call(this, key, value));\n        }\n        return _results;\n      }\n    });\n    def({\n      loadEmbeddedData: function() {\n        this.eachEmbed(function(path, data) {\n          var constructor, datum, id, model, share, _results;\n          if (!this.share.at(path).get()) this.share.at(path).set(new Object);\n          constructor = AS.loadPath(path);\n          _results = [];\n          for (id in data) {\n            datum = data[id];\n            share = this.share.at(path, id);\n            model = constructor.find(id);\n            _results.push(model.share = share);\n          }\n          return _results;\n        });\n        return this.eachEmbed(function(path, data) {\n          var constructor, datum, id, model, _results;\n          constructor = AS.loadPath(path);\n          _results = [];\n          for (id in data) {\n            datum = data[id];\n            model = constructor.find(id);\n            if (model === this.model) {\n              _results.push(this.sync());\n            } else {\n              _results.push(this.adapterFor({\n                model: model,\n                share: this.share\n              }).sync());\n            }\n          }\n          return _results;\n        });\n      }\n    });\n    return def({\n      adapterFor: function(options) {\n        return this.store.adapterFor(options);\n      }\n    });\n  });\n\n}).call(this);\n\n})();\n//@ sourceURL=alpha_simprini/core/model/share");minispade.register('alpha_simprini/core/model/store', "(function() {(function() {\n  var AS, Taxi, clone, extend, _ref;\n\n  AS = require(\"alpha_simprini\");\n\n  Taxi = require(\"taxi\");\n\n  _ref = require(\"underscore\"), extend = _ref.extend, clone = _ref.clone;\n\n  AS.Model.Store = AS.Object.extend(function(_arg) {\n    var def, defs, delegate, include;\n    delegate = _arg.delegate, include = _arg.include, def = _arg.def, defs = _arg.defs;\n    include(Taxi.Mixin);\n    def({\n      initialize: function(_arg2) {\n        this.adapterClass = _arg2.adapterClass, this.adapterConfig = _arg2.adapterConfig;\n        if (this.adapterConfig == null) this.adapterConfig = {};\n        return this.adapterConfig.store = this;\n      }\n    });\n    def({\n      adapterFor: function(options) {\n        return this.adapterClass[\"new\"](extend(clone(this.adapterConfig), options));\n      }\n    });\n    return def({\n      load: function(constructor, id) {\n        var model;\n        model = constructor.find(id);\n        this.adapterFor({\n          model: model\n        }).open();\n        return model;\n      }\n    });\n  });\n\n}).call(this);\n\n})();\n//@ sourceURL=alpha_simprini/core/model/store");minispade.register('alpha_simprini/core/model/synapse', "(function() {(function() {\n  var AS, _;\n\n  AS = require(\"alpha_simprini\");\n\n  _ = require(\"underscore\");\n\n  AS.Model.AbstractSynapse = AS.Object.extend(function(_arg) {\n    var def, defs, delegate, include;\n    delegate = _arg.delegate, include = _arg.include, def = _arg.def, defs = _arg.defs;\n    defs({\n      create: function(raw) {\n        if (raw.constructor.Synapse) {\n          return raw.constructor.Synapse[\"new\"](raw);\n        } else {\n          return null;\n        }\n      }\n    });\n    def({\n      initialize: function(raw) {\n        this.raw = raw;\n        this.namespace = \".\" + (_.uniqueId('s'));\n        this.observations = [];\n        return this.notifications = [];\n      }\n    });\n    def({\n      observe: function(other, config) {\n        if (config == null) config = {};\n        if (config.syncNow == null) config.syncNow = true;\n        return this.observations.push(this.dendriteClass[\"new\"](this, other, config));\n      }\n    });\n    def({\n      notify: function(other, config) {\n        if (config == null) config = {};\n        if (config.syncNow == null) config.syncNow = false;\n        return this.notifications.push(this.dendriteClass[\"new\"](other, this, config));\n      }\n    });\n    def({\n      block: function(fn) {\n        this.blocking = true;\n        fn();\n        return this.blocking = void 0;\n      }\n    });\n    def({\n      stopObserving: function(other) {\n        _(this.observations).invoke('off');\n        return this.observations = [];\n      }\n    });\n    return def({\n      stopNotifying: function(other) {\n        _(this.notifications).invoke('off');\n        return this.notifications = [];\n      }\n    });\n  });\n\n  AS.Model.Synapse = AS.Model.AbstractSynapse.extend(function(_arg) {\n    var def, defs, delegate, include;\n    delegate = _arg.delegate, include = _arg.include, def = _arg.def, defs = _arg.defs;\n    this.prototype.dendriteClass = AS.Model.Dendrite;\n    def({\n      binds: AS.unimplemented(\"binds: (callback) ->\")\n    });\n    def({\n      unbinds: AS.unimplemented(\"unbinds: (callback) ->\")\n    });\n    def({\n      get: AS.unimplemented(\"get: ->\")\n    });\n    return def({\n      set: AS.unimplemented(\"set: (value) ->\")\n    });\n  });\n\n  AS.Model.CollectionSynapse = AS.Model.AbstractSynapse.extend(function(_arg) {\n    var def, defs, delegate, include;\n    delegate = _arg.delegate, include = _arg.include, def = _arg.def, defs = _arg.defs;\n    this.prototype.dendriteClass = AS.Model.CollectionDendrite;\n    def({\n      binds: AS.unimplemented(\"binds: (insertCallback, removeCallback) ->\")\n    });\n    def({\n      unbinds: AS.unimplemented(\"unbinds: (insertCallback, removeCallback) ->\")\n    });\n    def({\n      insert: AS.unimplemented(\"insert: (item, options) ->\")\n    });\n    def({\n      remove: AS.unimplemented(\"remove: (item) ->\")\n    });\n    return def({\n      each: AS.unimplemented(\"each: (fn) ->\")\n    });\n  });\n\n}).call(this);\n\n})();\n//@ sourceURL=alpha_simprini/core/model/synapse");minispade.register('alpha_simprini/core/models/file', "(function() {(function() {\n  var $, AS, camelize, _;\n\n  AS = require(\"alpha_simprini\");\n\n  _ = require(\"underscore\");\n\n  $ = require(\"jquery\");\n\n  camelize = require(\"fleck\").upperCamelize;\n\n  AS.Models.File = AS.Model.extend(function(_arg) {\n    var MIME, MIME_FAMILY, MIME_TYPES, def, defs, delegate, include;\n    delegate = _arg.delegate, include = _arg.include, def = _arg.def, defs = _arg.defs;\n    defs({\n      familyClasses: AS.Map[\"new\"](function() {\n        return this;\n      })\n    });\n    defs({\n      registerFamilyClass: function(mimeFamily, klass) {\n        return this.familyClasses.set(mimeFamily, klass);\n      }\n    });\n    MIME_TYPES = {\n      \"png\": \"image/png\",\n      \"jpg\": \"image/jpeg\",\n      \"jpeg\": \"image/jpeg\",\n      \"gif\": \"image/gif\"\n    };\n    MIME = function(path) {\n      var file;\n      file = $.url(path).attr(\"file\");\n      return MIME_TYPES[file.split(\".\")[1]];\n    };\n    MIME_FAMILY = /^(.*)\\/(.*)$/;\n    defs({\n      classForMimeType: function(mime) {\n        var family;\n        family = mime.match(MIME_FAMILY)[1];\n        return this.familyClasses.get(family);\n      }\n    });\n    this.property(\"file\");\n    this.field(\"name\");\n    this.field(\"bytes\");\n    this.field(\"mime\");\n    this.field(\"url\");\n    defs({\n      build: function(source) {\n        if (_.isString(source)) {\n          return this.build_from_url(source);\n        } else if (source instanceof this.prototype.File) {\n          return this.build_from_filereader(source);\n        }\n      }\n    });\n    defs({\n      build_from_filereader: function(file) {\n        return this.classForMimeType(file.type)[\"new\"]({\n          file: file\n        });\n      }\n    });\n    def({\n      initialize: function() {\n        var file;\n        this._super.apply(this, arguments);\n        if (file = this.file.get()) {\n          this.name.set(file.name);\n          this.bytes.set(file.size);\n          return this.mime.set(file.type);\n        }\n      }\n    });\n    this.prototype.initialize.doc = {\n      desc: \"\"\n    };\n    def({\n      read: function(callback) {\n        if (this.file.get()) return this.readFile(callback);\n      }\n    });\n    this.prototype.read.doc = {\n      params: [[\"callback\", Function, true]],\n      desc: \"\"\n    };\n    def({\n      readFile: function(callback) {\n        var reader;\n        reader = new this.FileReader;\n        reader.onload = function(event) {\n          this.dataURL = event.target.result;\n          return callback(this.dataURL);\n        };\n        reader.readAsDataURL(this.file.get());\n        return callback;\n      }\n    });\n    this.prototype.readFile.doc = {\n      params: [[\"callback\", Function, true]],\n      desc: \"\"\n    };\n    def({\n      upload: function() {\n        var formdata,\n          _this = this;\n        formdata = new FormData;\n        formdata.append(\"image[image]\", this.file.get());\n        console.log(formdata);\n        return $.ajax({\n          url: \"/images\",\n          type: \"POST\",\n          data: formdata,\n          processData: false,\n          contentType: false,\n          error: function() {\n            return require(\"alpha_simprini\").error(\"POST /images failed\", _this);\n          },\n          success: function(data, status, xhr) {\n            _this.url.set(xhr.getResponseHeader(\"Location\"));\n            return _this.trigger(\"uploaded\");\n          }\n        });\n      }\n    });\n    return this.prototype.upload.doc = {\n      desc: \"\"\n    };\n  });\n\n  if (typeof FileReader !== 'undefined') {\n    AS.Models.File.prototype.FileReader = FileReader;\n  }\n\n  if (typeof File !== 'undefined') AS.Models.File.prototype.File = File;\n\n}).call(this);\n\n})();\n//@ sourceURL=alpha_simprini/core/models/file");minispade.register('alpha_simprini/core/models/group', "(function() {(function() {\n  var AS;\n\n  AS = require(\"alpha_simprini\");\n\n  AS.Models.Group = AS.Model.extend(function(_arg) {\n    var def, defs, delegate, include;\n    delegate = _arg.delegate, include = _arg.include, def = _arg.def, defs = _arg.defs;\n    this.property(\"metaData\");\n    this.field(\"name\");\n    this.hasMany(\"members\");\n    return this.virtualProperties('members', {\n      membersCount: function() {\n        return this.members.backingCollection.length;\n      }\n    });\n  });\n\n}).call(this);\n\n})();\n//@ sourceURL=alpha_simprini/core/models/group");minispade.register('alpha_simprini/core/models/grouping', "(function() {(function() {\n  var AS;\n\n  AS = require(\"alpha_simprini\");\n\n  AS.Models.Grouping = AS.Model.extend(function(_arg) {\n    var def, defs, delegate, include;\n    delegate = _arg.delegate, include = _arg.include, def = _arg.def, defs = _arg.defs;\n    this.hasMany('groups');\n    def({\n      initialize: function(backingCollection, groupByProperty, metaData) {\n        var _this = this;\n        this.backingCollection = backingCollection;\n        this.groupByProperty = groupByProperty;\n        this.metaData = metaData != null ? metaData : {};\n        this._super();\n        this.groupMap = AS.Map[\"new\"]();\n        this.itemMap = AS.Map[\"new\"]();\n        this.backingCollection.bind({\n          event: \"add\",\n          handler: this.addToGroup,\n          context: this\n        });\n        this.backingCollection.bind({\n          event: \"remove\",\n          handler: this.removeFromGroup,\n          context: this\n        });\n        this.backingCollection.bind({\n          event: \"change:\" + this.groupByProperty,\n          handler: this.determineNewGroup,\n          context: this\n        });\n        return this.backingCollection.each(function(item) {\n          return _this.addToGroup(item);\n        });\n      }\n    });\n    this.prototype.initialize.doc = {\n      params: [\n        [\"@backingCollection\", AS.Collection, true], [\"@groupByProperty\", String, true], [\n          \"@metaData\", Object, false, {\n            \"default\": {}\n          }\n        ]\n      ],\n      desc: \"\"\n    };\n    def({\n      addToGroup: function(item) {\n        var group, name;\n        name = item[this.groupByProperty].get();\n        if (!(group = this.groupMap.get(name))) {\n          group = AS.Models.Group[\"new\"]({\n            name: name,\n            metaData: this.metaData\n          });\n          this.groups.add(group);\n          this.groupMap.set(name, group);\n        }\n        this.itemMap.set(item, group);\n        return group.members.add(item);\n      }\n    });\n    this.prototype.addToGroup.doc = {\n      params: [[\"item\", AS.Model, true]],\n      desc: \"\"\n    };\n    def({\n      removeFromGroup: function(item) {\n        var group;\n        if (!(group = this.itemMap.get(item))) return;\n        return group.members.remove(item);\n      }\n    });\n    this.prototype.removeFromGroup.doc = {\n      params: [[\"item\", AS.Model, true]],\n      desc: \"\"\n    };\n    def({\n      determineNewGroup: function(item) {\n        this.removeFromGroup(item);\n        return this.addToGroup(item);\n      }\n    });\n    return this.prototype.determineNewGroup.doc = {\n      params: [[\"item\", AS.Model, true]],\n      desc: \"\"\n    };\n  });\n\n}).call(this);\n\n})();\n//@ sourceURL=alpha_simprini/core/models/grouping");minispade.register('alpha_simprini/core/models/multiple_selection_model', "(function() {(function() {\n  var AS;\n\n  AS = require(\"alpha_simprini\");\n\n  AS.Models.MultipleSelectionModel = AS.Model.extend(function(_arg) {\n    var def;\n    def = _arg.def;\n    this.hasMany(\"items\");\n    def({\n      initialize: function() {\n        var _this = this;\n        this._super();\n        this.items.bind(\"add\", function(item) {\n          return _this.trigger(\"add\", item);\n        });\n        return this.items.bind(\"remove\", function(item) {\n          return _this.trigger(\"remove\", item);\n        });\n      }\n    });\n    this.prototype.initialize.doc = {\n      desc: \"\"\n    };\n    def({\n      select: function(item) {\n        return this.items.add(item);\n      }\n    });\n    this.prototype.select.doc = {\n      params: [[\"item\", AS.Model, true]],\n      desc: \"\"\n    };\n    def({\n      deselect: function(item) {\n        return this.items.remove(item);\n      }\n    });\n    this.prototype.deselect.doc = {\n      params: [[\"item\", AS.Model, true]],\n      desc: \"\"\n    };\n    def({\n      clear: function() {\n        return this.items.each(this.items.remove, this.items);\n      }\n    });\n    return this.prototype.clear.doc = {\n      desc: \"\"\n    };\n  });\n\n}).call(this);\n\n})();\n//@ sourceURL=alpha_simprini/core/models/multiple_selection_model");minispade.register('alpha_simprini/core/models/radio_selection_model', "(function() {(function() {\n  var AS;\n\n  AS = require(\"alpha_simprini\");\n\n  AS.Models.RadioSelectionModel = AS.Model.extend(function(_arg) {\n    var def;\n    def = _arg.def;\n    this.property('selected');\n    def({\n      initialize: function(options) {\n        if (options == null) options = {};\n        this.property = options.property;\n        this._super();\n        return this.select(void 0);\n      }\n    });\n    this.prototype.initialize.doc = {\n      params: [\n        [\n          \"options\", Object, false, {\n            \"default\": {}\n          }\n        ]\n      ],\n      desc: \"\"\n    };\n    def({\n      select: function(item) {\n        var _ref;\n        if (this.property) {\n          if ((_ref = this.selected.get()) != null) _ref[this.property].set(null);\n          if (item != null) item[this.property].set(true);\n        }\n        return this.selected.set(item);\n      }\n    });\n    return this.prototype.select.doc = {\n      params: [[\"item\", \"*\", true]],\n      desc: \"\"\n    };\n  });\n\n}).call(this);\n\n})();\n//@ sourceURL=alpha_simprini/core/models/radio_selection_model");minispade.register('alpha_simprini/core/properties/belongs_to', "(function() {(function() {\n  var AS, _;\n\n  AS = require(\"alpha_simprini\");\n\n  _ = require(\"underscore\");\n\n  AS.Model.BelongsTo = AS.Model.HasOne.extend();\n\n  AS.Model.BelongsTo.Instance = AS.Model.HasOne.Instance.extend(function(_arg) {\n    var def, defs, delegate, include;\n    delegate = _arg.delegate, include = _arg.include, def = _arg.def, defs = _arg.defs;\n    this.Synapse = AS.Model.Field.Instance.Synapse.extend(function(_arg2) {\n      var def, defs, delegate, include;\n      delegate = _arg2.delegate, include = _arg2.include, def = _arg2.def, defs = _arg2.defs;\n      def({\n        get: function() {\n          return this.raw.get();\n        }\n      });\n      return def({\n        set: function(value) {\n          return this.raw.set(value);\n        }\n      });\n    });\n    return this.ShareSynapse = AS.Model.Field.Instance.ShareSynapse.extend(function(_arg2) {\n      var def, defs, delegate, include;\n      delegate = _arg2.delegate, include = _arg2.include, def = _arg2.def, defs = _arg2.defs;\n      def({\n        get: function() {\n          return this.raw.at(this.path).get();\n        }\n      });\n      return def({\n        set: function(value) {\n          if (value != null ? value.id : void 0) {\n            return this._super(value != null ? value.id : void 0);\n          }\n        }\n      });\n    });\n  });\n\n  AS.Model.defs({\n    belongsTo: function(name, options) {\n      return AS.Model.BelongsTo[\"new\"](name, this, options);\n    }\n  });\n\n}).call(this);\n\n})();\n//@ sourceURL=alpha_simprini/core/properties/belongs_to");minispade.register('alpha_simprini/core/properties/field', "(function() {(function() {\n  var AS, isBoolean, isString, _, _ref,\n    __slice = Array.prototype.slice;\n\n  AS = require(\"alpha_simprini\");\n\n  _ = require(\"underscore\");\n\n  _ref = require(\"underscore\"), isBoolean = _ref.isBoolean, isString = _ref.isString;\n\n  AS.Enum = AS.Object.extend(function(_arg) {\n    var def, defs, delegate, include;\n    delegate = _arg.delegate, include = _arg.include, def = _arg.def, defs = _arg.defs;\n    defs({\n      read: function(value, options) {\n        return options.values[value];\n      }\n    });\n    return defs({\n      write: function(value, options) {\n        return options.values.indexOf(value);\n      }\n    });\n  });\n\n  AS.Model.Field = AS.Property.extend(function(_arg) {\n    var Casters, def, defs, delegate, include;\n    delegate = _arg.delegate, include = _arg.include, def = _arg.def, defs = _arg.defs;\n    defs({\n      Casters: AS.Map[\"new\"]()\n    });\n    Casters = this.Casters;\n    Casters.set(String, {\n      read: function(value) {\n        if (value != null) return String(value);\n      },\n      write: function(value) {\n        if (value != null) return String(value);\n      }\n    });\n    Casters.set(Number, {\n      read: function(value) {\n        if (value != null) return Number(value);\n      },\n      write: function(value) {\n        if (value != null) return String(value);\n      }\n    });\n    Casters.set(Date, {\n      read: function(value) {\n        if (isString(value)) {\n          return new Date(value);\n        } else {\n          return value;\n        }\n      },\n      write: function(value) {\n        if (value instanceof Date) {\n          return value.toJSON();\n        } else {\n          return value;\n        }\n      }\n    });\n    Casters.set(Boolean, {\n      read: function(value) {\n        if (isBoolean(value)) return value;\n        if (value === \"true\") return true;\n        if (value === \"false\") return false;\n        return false;\n      },\n      write: function(value) {\n        if (value === \"true\" || value === true) return \"true\";\n        if (value === \"false\" || value === false) return \"false\";\n        return \"false\";\n      }\n    });\n    Casters.set(AS.Enum, AS.Enum);\n    def({\n      initialize: function(name, _constructor, options) {\n        this.name = name;\n        this._constructor = _constructor;\n        this.options = options != null ? options : {};\n        this.options.name = this.name;\n        return this._constructor.writeInheritableValue('properties', this.name, this);\n      }\n    });\n    this.prototype.initialize.doc = {\n      params: [\n        [\"@name\", String, true], [\"@_constructor\", AS.Model, true], [\n          \"@options\", Object, false, {\n            \"default\": {}\n          }\n        ]\n      ],\n      desc: \"\"\n    };\n    def({\n      instance: function(object) {\n        return this.constructor.Instance[\"new\"](object, this.options);\n      }\n    });\n    this.prototype.instance.doc = {\n      params: [[\"object\", AS.Model, true]],\n      desc: \"\"\n    };\n    return this.Instance = AS.Property.Instance.extend(function(_arg2) {\n      var def;\n      def = _arg2.def;\n      def({\n        initialize: function(object, options) {\n          var _base, _ref2;\n          this.object = object;\n          this.options = options != null ? options : {};\n          return (_ref2 = (_base = this.options).type) != null ? _ref2 : _base.type = String;\n        }\n      });\n      this.prototype.initialize.doc = {\n        params: [\n          [\"@object\", AS.Model, true], [\n            \"@options\", Object, false, {\n              \"default\": true\n            }\n          ]\n        ],\n        desc: \"\"\n      };\n      def({\n        syncWith: function(share) {\n          this.share = share.at(this.options.name);\n          if (this.share.get() == null) this.share.set(\"\");\n          this.stopSync();\n          this.synapse = this.constructor.Synapse[\"new\"](this);\n          this.shareSynapse = this.constructor.ShareSynapse[\"new\"](share, this.options.name);\n          this.synapse.observe(this.shareSynapse);\n          return this.synapse.notify(this.shareSynapse);\n        }\n      });\n      this.prototype.syncWith.doc = {\n        params: [[\"share\", \"ShareJS.Doc\", true]],\n        desc: \"\"\n      };\n      def({\n        stopSync: function() {\n          var _ref2, _ref3;\n          if ((_ref2 = this.synapse) != null) _ref2.stopObserving();\n          return (_ref3 = this.synapse) != null ? _ref3.stopNotifying() : void 0;\n        }\n      });\n      this.prototype.stopSync.doc = {\n        desc: \"\"\n      };\n      def({\n        get: function() {\n          var value;\n          if (this.value !== void 0) {\n            return value = Casters.get(this.options.type).read(this.value, this.options);\n          } else {\n            return this.options[\"default\"];\n          }\n        }\n      });\n      this.prototype.get.doc = {\n        \"return\": \"*\",\n        desc: \"\"\n      };\n      def({\n        set: function(value) {\n          var writeValue;\n          writeValue = Casters.get(this.options.type).write(value, this.options);\n          if (writeValue === this.value) return this.value;\n          this.value = writeValue;\n          this.object.trigger(\"change\");\n          this.object.trigger(\"change:\" + this.options.name);\n          this.trigger(\"change\");\n          this.triggerDependants();\n          return this.value;\n        }\n      });\n      this.prototype.set.doc = {\n        params: [[\"value\", \"*\", true]],\n        desc: \"\"\n      };\n      this.Synapse = AS.Model.Synapse.extend(function(_arg3) {\n        var def, defs, delegate, include;\n        delegate = _arg3.delegate, include = _arg3.include, def = _arg3.def, defs = _arg3.defs;\n        delegate('get', 'set', {\n          to: 'raw'\n        });\n        def({\n          binds: function(callback) {\n            return this.raw.bind(\"change\", callback);\n          }\n        });\n        return def({\n          unbinds: function(callback) {\n            return this.raw.unbind(\"change\", callback);\n          }\n        });\n      });\n      return this.ShareSynapse = AS.Model.Synapse.extend(function(_arg3) {\n        var def, defs, delegate, include;\n        delegate = _arg3.delegate, include = _arg3.include, def = _arg3.def, defs = _arg3.defs;\n        def({\n          initialize: function() {\n            var path, raw;\n            raw = arguments[0], path = 2 <= arguments.length ? __slice.call(arguments, 1) : [];\n            this.raw = raw;\n            this.path = path;\n            return this._super.apply(this, arguments);\n          }\n        });\n        def({\n          get: function() {\n            return this.raw.at(this.path).get();\n          }\n        });\n        def({\n          set: function(value) {\n            var current, length, raw;\n            raw = this.raw.at(this.path);\n            current = raw.get();\n            if (current) {\n              length = current.length;\n              raw.del(0, length);\n              return raw.insert(0, value.toString());\n            } else if (value) {\n              return raw.insert(0, value.toString());\n            } else if (current) {\n              return raw.del(0, current.toString().length);\n            }\n          }\n        });\n        def({\n          binds: function(callback) {\n            return this.listeners = [this.raw.at().on(\"insert\", callback), this.raw.at().on(\"replace\", callback), this.raw.at(this.path).on(\"insert\", callback), this.raw.at(this.path).on(\"delete\", callback)];\n          }\n        });\n        return def({\n          unbinds: function(callback) {\n            var listener, _i, _len, _ref2;\n            _ref2 = this.listeners;\n            for (_i = 0, _len = _ref2.length; _i < _len; _i++) {\n              listener = _ref2[_i];\n              this.raw.removeListener(listener);\n            }\n            return this.listeners = [];\n          }\n        });\n      });\n    });\n  });\n\n  AS.Model.defs({\n    field: function(name, options) {\n      return AS.Model.Field[\"new\"](name, this, options);\n    }\n  });\n\n}).call(this);\n\n})();\n//@ sourceURL=alpha_simprini/core/properties/field");minispade.register('alpha_simprini/core/properties/has_many', "(function() {(function() {\n  var AS, _,\n    __indexOf = Array.prototype.indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },\n    __slice = Array.prototype.slice;\n\n  AS = require(\"alpha_simprini\");\n\n  _ = require(\"underscore\");\n\n  AS.Model.HasMany = AS.Model.Field.extend(function(_arg) {\n    var def, defs, delegate, include;\n    delegate = _arg.delegate, include = _arg.include, def = _arg.def, defs = _arg.defs;\n    return def({\n      couldBe: function(test) {\n        var _base, _ref;\n        if (_ref = typeof (_base = this.options).model === \"function\" ? _base.model() : void 0, __indexOf.call(test.ancestors || [], _ref) >= 0) {\n          return true;\n        }\n        return this._super.apply(this, arguments);\n      }\n    });\n  });\n\n  AS.Model.HasMany.Instance = AS.Model.Field.Instance.extend(function(_arg) {\n    var def, delegate;\n    def = _arg.def, delegate = _arg.delegate;\n    delegate(AS.COLLECTION_DELEGATES, {\n      to: \"backingCollection\"\n    });\n    delegate('groupBy', 'bind', 'trigger', 'unbind', {\n      to: \"backingCollection\"\n    });\n    def({\n      inspect: function() {\n        return \"\" + this.options.name + \": [\" + this.backingCollection.length + \"]}\";\n      }\n    });\n    this.prototype.inspect.doc = {\n      \"return\": String,\n      desc: \"\"\n    };\n    def({\n      initialize: function(object, options) {\n        var _this = this;\n        this.object = object;\n        this.options = options != null ? options : {};\n        this.model = this.options.model;\n        if (this.options.inverse) this.options.source = this.object;\n        this.backingCollection = AS.Collection[\"new\"](void 0, this.options);\n        return this.bind('change', (function() {\n          return _this.triggerDependants();\n        }), this);\n      }\n    });\n    this.prototype.initialize.doc = {\n      params: [\n        [\"@object\", AS.Model, true], [\n          \"@options\", Obect, false, {\n            \"default\": {}\n          }\n        ]\n      ],\n      desc: \"\"\n    };\n    def({\n      syncWith: function(share) {\n        var alreadyThere,\n          _this = this;\n        console.log(\"syncWith\", this.toString());\n        this.share = share.at(this.options.name);\n        this.stopSync();\n        this.synapse = this.constructor.Synapse[\"new\"](this);\n        this.shareSynapse = this.constructor.ShareSynapse[\"new\"](share, this.options.name);\n        alreadyThere = _.clone(this.backingCollection.models.value());\n        this.synapse.observe(this.shareSynapse);\n        _.each(alreadyThere, function(item) {\n          return _this.shareSynapse.insert(item, {});\n        });\n        return this.synapse.notify(this.shareSynapse);\n      }\n    });\n    this.prototype.syncWith.doc = {\n      params: [[\"share\", \"ShareJS.Doc\", true]],\n      desc: \"\"\n    };\n    def({\n      objects: function() {\n        return this.backingCollection.models.value();\n      }\n    });\n    this.prototype.objects.doc = {\n      \"return\": [AS.Model],\n      desc: \"\"\n    };\n    def({\n      bindToPathSegment: function(segment) {\n        segment.binds(this, \"add\", segment.insertCallback);\n        return segment.binds(this, \"remove\", segment.removeCallback);\n      }\n    });\n    this.prototype.bindToPathSegment.doc = {\n      params: [[\"segment\", Taxi.Segment, true]],\n      desc: \"\"\n    };\n    def({\n      set: function(models) {\n        var model, _i, _len, _results;\n        _results = [];\n        for (_i = 0, _len = models.length; _i < _len; _i++) {\n          model = models[_i];\n          _results.push(this.backingCollection.add(model));\n        }\n        return _results;\n      }\n    });\n    this.prototype.set.doc = {\n      params: [[\"models\", [[AS.Model, String, Object]], true]],\n      desc: \"\"\n    };\n    def({\n      add: function(model, options) {\n        var added;\n        added = this.backingCollection.add(model, options);\n        this.triggerDependants();\n        return added;\n      }\n    });\n    this.prototype.add.doc = {\n      params: [[\"model\", AS.Model, true], [\"options\", Object, false]],\n      desc: \"\"\n    };\n    def({\n      at: function(index) {\n        return this.backingCollection.at.apply(this.backingCollection, arguments);\n      }\n    });\n    this.prototype.at.doc = {\n      params: [[\"index\", Number, true]],\n      \"return\": [AS.Model, void 0],\n      desc: \"\"\n    };\n    def({\n      remove: function(model) {\n        var removed;\n        removed = this.backingCollection.remove.apply(this.backingCollection, arguments);\n        this.triggerDependants();\n        return removed;\n      }\n    });\n    this.prototype.remove.doc = {\n      params: [[\"model\", AS.Model, true]],\n      \"return\": AS.Model,\n      desc: \"\"\n    };\n    def({\n      pluck: function(key) {\n        return this.map(function(item) {\n          return item[key].get();\n        });\n      }\n    });\n    this.prototype.pluc.doc = {\n      params: [[\"key\", String, true]],\n      \"return\": [\"*\"],\n      desc: \"\"\n    };\n    def({\n      any: function() {\n        return _.any(this.backingCollection);\n      }\n    });\n    this.prototype.any.doc = {\n      \"return\": Boolean,\n      desc: \"\"\n    };\n    this.Synapse = AS.Model.CollectionSynapse.extend(function(_arg2) {\n      var def, defs, delegate, include;\n      delegate = _arg2.delegate, include = _arg2.include, def = _arg2.def, defs = _arg2.defs;\n      def({\n        insert: function(item, options) {\n          return this.raw.add(item, options);\n        }\n      });\n      def({\n        remove: function(item, options) {\n          return this.raw.remove(this.raw.at(options.at));\n        }\n      });\n      def({\n        binds: function(insertCallback, removeCallback) {\n          this.raw.bind(\"add\" + this.namespace, function(model, collection, options) {\n            return insertCallback(model, options);\n          });\n          return this.raw.bind(\"remove\" + this.namespace, function(model, collection, options) {\n            return removeCallback(model, options);\n          });\n        }\n      });\n      def({\n        each: function(fn) {\n          return this.raw.each(fn);\n        }\n      });\n      return def({\n        unbinds: function() {\n          return this.raw.unbind(this.namespace);\n        }\n      });\n    });\n    return this.ShareSynapse = AS.Model.CollectionSynapse.extend(function(_arg2) {\n      var def, defs, delegate, include;\n      delegate = _arg2.delegate, include = _arg2.include, def = _arg2.def, defs = _arg2.defs;\n      def({\n        initialize: function() {\n          var path, raw;\n          raw = arguments[0], path = 2 <= arguments.length ? __slice.call(arguments, 1) : [];\n          this.raw = raw;\n          this.path = path;\n          this._super.apply(this, arguments);\n          if (!this.raw.at(this.path).get()) return this.raw.at(this.path).set([]);\n        }\n      });\n      def({\n        binds: function(insertCallback, removeCallback) {\n          var raw;\n          raw = this.raw.at(this.path);\n          return this.listeners = [\n            raw.on(\"insert\", function(position, data) {\n              return insertCallback(data, {\n                at: position\n              });\n            }), raw.on(\"delete\", function(position, data) {\n              return removeCallback(data, {\n                at: position\n              });\n            })\n          ];\n        }\n      });\n      def({\n        unbinds: function() {\n          var listener, _i, _len, _ref, _results;\n          _ref = this.listeners;\n          _results = [];\n          for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n            listener = _ref[_i];\n            _results.push(this.raw.removeListener(listener));\n          }\n          return _results;\n        }\n      });\n      def({\n        insert: function(model, options) {\n          if (this.path[0] === \"compositions\") debugger;\n          if (options.at == null) options.at = this.raw.at(this.path).get().length;\n          return this.raw.at(this.path).insert(options.at, model.id);\n        }\n      });\n      def({\n        remove: function(model, options) {\n          return this.raw.at(this.path, options.at).remove();\n        }\n      });\n      return def({\n        each: function(fn) {\n          return _.each(this.raw.at(this.path).get(), fn);\n        }\n      });\n    });\n  });\n\n  AS.Model.defs({\n    hasMany: function(name, options) {\n      return AS.Model.HasMany[\"new\"](name, this, options);\n    }\n  });\n\n}).call(this);\n\n})();\n//@ sourceURL=alpha_simprini/core/properties/has_many");minispade.register('alpha_simprini/core/properties/has_one', "(function() {(function() {\n  var AS, _,\n    __indexOf = Array.prototype.indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };\n\n  AS = require(\"alpha_simprini\");\n\n  _ = require(\"underscore\");\n\n  AS.Model.HasOne = AS.Model.Field.extend(function(_arg) {\n    var def, defs, delegate, include;\n    delegate = _arg.delegate, include = _arg.include, def = _arg.def, defs = _arg.defs;\n    def({\n      couldBe: function(test) {\n        var _base;\n        if (__indexOf.call(typeof (_base = this.options).model === \"function\" ? _base.model().ancestors : void 0, test) >= 0) {\n          return true;\n        }\n        return this._super.apply(this, arguments);\n      }\n    });\n    return this.prototype.couldBe.doc = {\n      params: [[\"test\", void 0, true]],\n      desc: \"\"\n    };\n  });\n\n  AS.Model.HasOne.Instance = AS.Model.Field.Instance.extend(function(_arg) {\n    var def;\n    def = _arg.def;\n    def({\n      initialize: function(object, options) {\n        var _base,\n          _this = this;\n        this.object = object;\n        this.options = options;\n        if ((_base = this.options).model == null) {\n          _base.model = function() {\n            return AS.Model;\n          };\n        }\n        this.model = this.options.model;\n        this.namespace = \".\" + (_.uniqueId());\n        this._super.apply(this, arguments);\n        return this.bind(\"destroy\", function() {\n          return _this.set(null);\n        });\n      }\n    });\n    this.prototype.initialize.doc = {\n      params: [[\"@object\", AS.Model, true], [\"@options\", Object, true]],\n      desc: \"\"\n    };\n    def({\n      get: function() {\n        return this.value;\n      }\n    });\n    this.prototype.get.doc = {\n      \"return\": [AS.Model, null],\n      desc: \"\"\n    };\n    def({\n      set: function(value) {\n        var konstructor, _ref;\n        if (value != null ? value.model : void 0) value = value.model;\n        if (value === this.value) return this.value;\n        if (_.isString(value) && (konstructor = this.model()) !== AS.Model) {\n          value = konstructor.find(value);\n        } else if (_.isString(value)) {\n          value = AS.All.byId[value];\n        } else if (value instanceof AS.Model) {\n          value = value;\n        } else if (_.isObject(value)) {\n          value = this.options.model()[\"new\"](value);\n        }\n        if ((_ref = this.value) != null) _ref.unbind(this.namespace);\n        if (this.value && this.options.inverse && this.value[this.options.inverse]) {\n          if (this.value[this.options.inverse].include(this.object).value()) {\n            this.value[this.options.inverse].remove(this.object);\n          }\n        }\n        this.value = value;\n        if (this.value && this.options.inverse && this.value[this.options.inverse]) {\n          if (!this.value[this.options.inverse].include(this.object).value()) {\n            this.value[this.options.inverse].add(this.object);\n          }\n        }\n        this.object.trigger(\"change\");\n        this.object.trigger(\"change:\" + this.options.name);\n        this.trigger(\"change\");\n        this.triggerDependants();\n        return this.value;\n      }\n    });\n    this.prototype.set.doc = {\n      params: [[\"value\", AS.Model]],\n      desc: \"\"\n    };\n    this.Synapse = AS.Model.Field.Instance.Synapse.extend(function(_arg2) {\n      var def, defs, delegate, include;\n      delegate = _arg2.delegate, include = _arg2.include, def = _arg2.def, defs = _arg2.defs;\n      def({\n        get: function() {\n          return this.raw.get();\n        }\n      });\n      return def({\n        set: function(value) {\n          return this.raw.set(value);\n        }\n      });\n    });\n    return this.ShareSynapse = AS.Model.Field.Instance.ShareSynapse.extend(function(_arg2) {\n      var def, defs, delegate, include;\n      delegate = _arg2.delegate, include = _arg2.include, def = _arg2.def, defs = _arg2.defs;\n      def({\n        get: function() {\n          return this.raw.at(this.path).get();\n        }\n      });\n      return def({\n        set: function(value) {\n          if (value != null ? value.id : void 0) {\n            return this._super(value != null ? value.id : void 0);\n          }\n        }\n      });\n    });\n  });\n\n  AS.Model.defs({\n    hasOne: function(name, options) {\n      return AS.Model.HasOne[\"new\"](name, this, options);\n    }\n  });\n\n}).call(this);\n\n})();\n//@ sourceURL=alpha_simprini/core/properties/has_one");minispade.register('alpha_simprini/core/properties/virtual_property', "(function() {(function() {\n  var AS, NULL_CACHE, _,\n    __slice = Array.prototype.slice;\n\n  AS = require(\"alpha_simprini\");\n\n  _ = require(\"underscore\");\n\n  AS.Model.VirtualProperty = AS.Model.Field.extend(function(_arg) {\n    var def;\n    def = _arg.def;\n    def({\n      initialize: function(name, _constructor, options) {\n        this.name = name;\n        this._constructor = _constructor;\n        this.options = options != null ? options : {};\n        this.options.name = this.name;\n        this.dependencies = this.options.dependencies;\n        return this._constructor.writeInheritableValue('properties', this.name, this);\n      }\n    });\n    this.prototype.initialize.doc = {\n      params: [[\"@name\", String, true], [\"@_constructor\", AS.Object, true], [\"@options\", Object, true]],\n      desc: \"\"\n    };\n    def({\n      instance: function(object) {\n        return this.constructor.Instance[\"new\"](object, this.options);\n      }\n    });\n    return this.prototype.instance.doc = {\n      params: [[\"object\", AS.Model, true]],\n      desc: \"\"\n    };\n  });\n\n  NULL_CACHE = new Object;\n\n  AS.Model.VirtualProperty.Instance = AS.Property.Instance.extend(function(_arg) {\n    var def;\n    def = _arg.def;\n    def({\n      initialize: function(object, options) {\n        this.object = object;\n        this.options = options;\n        this.cached = NULL_CACHE;\n        return this.bindDependencies();\n      }\n    });\n    this.prototype.initialize.doc = {\n      params: [[\"@object\", AS.Model, true], [\"@options\", Object, true]],\n      desc: \"\"\n    };\n    def({\n      bindDependencies: function() {\n        var dependency, _i, _len, _ref, _results;\n        _ref = this.options.dependencies;\n        _results = [];\n        for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n          dependency = _ref[_i];\n          _results.push(this.object[dependency].addDependant(this));\n        }\n        return _results;\n      }\n    });\n    this.prototype.bindDependencies.doc = {\n      desc: \"\"\n    };\n    def({\n      set: function(value) {\n        var set;\n        if (set = this.options.getSet.set) {\n          return set.call(this.object, value);\n        } else {\n          throw \"Can't set a VirtualProperty name: \" + this.options.name + \", dependencies: \" + (this.options.dependencies.join(','));\n        }\n      }\n    });\n    this.prototype.set.doc = {\n      params: [[value, \"*\", true]],\n      desc: \"\"\n    };\n    def({\n      get: function() {\n        return this.cached = this.compute();\n      }\n    });\n    this.prototype.get.doc = {\n      \"return\": \"*\",\n      desc: \"\"\n    };\n    def({\n      compute: function(args) {\n        return this.options.getSet.get.call(this.object);\n      }\n    });\n    this.prototype.compute.doc = {\n      private: true,\n      params: [[]],\n      desc: \"\"\n    };\n    def({\n      triggerFor: function() {\n        this.trigger(\"change\");\n        this.object.trigger(\"change\");\n        return this.object.trigger(\"change:\" + this.options.name);\n      }\n    });\n    return this.prototype.triggerFor.doc = {\n      private: true,\n      desc: \"\"\n    };\n  });\n\n  AS.Model.defs({\n    virtualProperties: function() {\n      var dependencies, fn, getSet, name, properties, _i, _results;\n      dependencies = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), properties = arguments[_i++];\n      _results = [];\n      for (name in properties) {\n        fn = properties[name];\n        if (_.isFunction(fn)) {\n          getSet = {\n            get: fn\n          };\n        } else {\n          getSet = fn;\n        }\n        _results.push(AS.Model.VirtualProperty[\"new\"](name, this, {\n          dependencies: dependencies,\n          getSet: getSet\n        }));\n      }\n      return _results;\n    }\n  });\n\n}).call(this);\n\n})();\n//@ sourceURL=alpha_simprini/core/properties/virtual_property");minispade.register('alpha_simprini/core/state_machine', "(function() {(function() {\n  var AS, _;\n\n  AS = require(\"alpha_simprini\");\n\n  _ = require(\"underscore\");\n\n  AS.StateMachine = AS.Module.extend(function(_arg) {\n    var def;\n    def = _arg.def;\n    def({\n      transitionState: function(options) {\n        var _name, _name2;\n        if (this.state === options.from) {\n          if (this.state) {\n            if (typeof this[_name = \"exit_\" + this.state] === \"function\") {\n              this[_name](options);\n            }\n          }\n          this.state = options.to;\n          return typeof this[_name2 = \"enter_\" + options.to] === \"function\" ? this[_name2](options) : void 0;\n        }\n      }\n    });\n    this.prototype.transitionState.doc = {\n      params: [[\"options\", Object, true]],\n      desc: \"\"\n    };\n    def({\n      defaultState: function(state) {\n        return this.transitionState({\n          from: void 0,\n          to: state\n        });\n      }\n    });\n    return this.prototype.defaultState.doc = {\n      params: [[\"state\", String, true]],\n      desc: \"\"\n    };\n  });\n\n}).call(this);\n\n})();\n//@ sourceURL=alpha_simprini/core/state_machine");minispade.register('alpha_simprini/packer', "(function() {(function() {\n\n  module(\"AS.Heap\", function() {\n    this.CLASS = 0x11;\n    this.ATTRIBUTES = 0x12;\n    this.CLASSES = 0x13;\n    this.OBJECTS = 0x14;\n    this.NAMED_OBJECTS = 0x15;\n    this.LITERALS = 0x16;\n    this.NullClass = (function() {\n\n      function NullClass() {}\n\n      return NullClass;\n\n    })();\n    this.Classes = {\n      PackedClass: Function,\n      Array: Array,\n      Numeric: Number,\n      Fixnum: Number,\n      String: String,\n      Symbol: String,\n      Hash: Object,\n      NilClass: null,\n      FalseClass: false,\n      TrueClass: true\n    };\n    return this.Unpacker = (function() {\n\n      function Unpacker(hash) {\n        var key, value, _ref, _ref2, _ref3;\n        this.literals = hash[AS.Heap.LITERALS];\n        this.classes = {};\n        _ref = hash[AS.Heap.CLASSES];\n        for (key in _ref) {\n          value = _ref[key];\n          this.classes[value] = this.resolve_class(key);\n        }\n        this.packed_objects = hash[AS.Heap.OBJECTS];\n        this.objects = {};\n        this.named_objects = {};\n        _ref2 = this.packed_objects;\n        for (key in _ref2) {\n          value = _ref2[key];\n          this.unpack_object(key);\n        }\n        _ref3 = hash[AS.Heap.NAMED_OBJECTS];\n        for (key in _ref3) {\n          value = _ref3[key];\n          this.named_objects[this.unpack_object(key)] = this.unpack_object(value);\n        }\n      }\n\n      Unpacker.prototype.resolve_class = function(key) {\n        var klass;\n        if ((klass = AS.Heap.Classes[key]) !== void 0) {\n          return klass;\n        } else {\n          throw new Error(\"Unresolved class with key \" + key);\n        }\n      };\n\n      Unpacker.prototype.allocate_object = function(klass) {\n        var ctor, object;\n        eval(\"function \" + klass.name + \" () {this.constructor = klass; }\");\n        ctor = eval(klass.name);\n        ctor.prototype = klass.prototype;\n        ctor.__super__ = klass.__super__;\n        return object = new ctor;\n      };\n\n      Unpacker.prototype.unpack_object = function(key) {\n        var attributes, item, klass, object, value, _i, _key, _len, _results, _value;\n        if (this.objects[key]) return this.objects[key];\n        value = this.packed_objects[key];\n        attributes = value[AS.Heap.ATTRIBUTES];\n        klass = this.classes[value[AS.Heap.CLASS]];\n        if (klass === Object) {\n          object = this.objects[key] = {};\n          for (_key in attributes) {\n            _value = attributes[_key];\n            object[this.unpack_object(_key)] = this.unpack_object(_value);\n          }\n          return object;\n        } else if (klass === Array) {\n          _results = [];\n          for (_i = 0, _len = attributes.length; _i < _len; _i++) {\n            item = attributes[_i];\n            _results.push(this.objects[key] = this.unpack_object(item));\n          }\n          return _results;\n        } else if (klass === Number) {\n          return this.objects[key] = this.literals[attributes];\n        } else if (klass === String) {\n          return this.objects[key] = this.literals[attributes];\n        } else if (klass === null) {\n          return this.objects[key] = null;\n        } else if (klass === true) {\n          return this.objects[key] = true;\n        } else if (klass === false) {\n          return this.objects[key] = false;\n        } else {\n          object = this.objects[key] = this.allocate_object(klass);\n          for (_key in attributes) {\n            _value = attributes[_key];\n            object[this.unpack_object(_key).replace(/^@/, '')] = this.unpack_object(_value);\n          }\n          return object;\n        }\n      };\n\n      return Unpacker;\n\n    })();\n  });\n\n}).call(this);\n\n})();\n//@ sourceURL=alpha_simprini/packer");minispade.register('alpha_simprini/string', "(function() {(function() {\n  var _;\n\n  _ = require(\"underscore\");\n\n  _.str = require(\"underscore.string\");\n\n  _.mixin(_.str.exports());\n\n  String.prototype.blank = function() {\n    return !!this.match(/^\\s*?$/);\n  };\n\n  String.prototype.underscore = function() {\n    var under;\n    under = this.replace(/([A-Z])/g, function(match) {\n      return \"_\" + match;\n    });\n    if (under[0] === \"_\") {\n      return under.slice(1).toLowerCase();\n    } else {\n      return under.toLowerCase();\n    }\n  };\n\n  String.prototype.camelcase = function() {\n    return this.replace(/^([a-z])|_([a-z])|-([a-z])/g, function(match) {\n      return match.toUpperCase();\n    }).replace(/-|_/, '');\n  };\n\n  String.prototype.dasherize = function() {\n    return this.underscore().replace(/_/g, '-');\n  };\n\n  /*\n  Copyright (c) 2010 Ryan Schuft (ryan.schuft@gmail.com)\n  \n  Permission is hereby granted, free of charge, to any person obtaining a copy\n  of this software and associated documentation files (the \"Software\"), to deal\n  in the Software without restriction, including without limitation the rights\n  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  copies of the Software, and to permit persons to whom the Software is\n  furnished to do so, subject to the following conditions:\n  \n  The above copyright notice and this permission notice shall be included in\n  all copies or substantial portions of the Software.\n  \n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  THE SOFTWARE.\n  */\n\n}).call(this);\n\n})();\n//@ sourceURL=alpha_simprini/string");